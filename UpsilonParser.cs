//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/steve/IdeaProjects/UpsilonLang/src\UpsilonParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class UpsilonParser : UpsilonParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_DOC_COMMENT=2, EMPTY_DELIMITED_DOC_COMMENT=3, 
		DELIMITED_DOC_COMMENT=4, SINGLE_LINE_COMMENT=5, DELIMITED_COMMENT=6, WHITESPACES=7, 
		SHARP=8, BOOL=9, CHAR=10, INT=11, NUM=12, STRING=13, VALUE=14, VOID=15, 
		FALSE=16, TRUE=17, NULL_=18, NEW=19, CONSTANT=20, CLASS=21, ENUM=22, BASE=23, 
		IMPORT=24, PRIVATE=25, PROTECTED=26, PUBLIC=27, STATIC=28, DIRECTORY=29, 
		OVERRIDE=30, IF=31, ELSE=32, SWITCH=33, CASE=34, DEFAULT=35, FOR=36, WHILE=37, 
		DO=38, STOP=39, START=40, SKIP_=41, TRY=42, CATCH=43, THROW=44, FUNCTION=45, 
		RETURN=46, THIS=47, IDENTIFIER=48, LITERAL_ACCESS=49, INTEGER_LITERAL=50, 
		HEX_INTEGER_LITERAL=51, BIN_INTEGER_LITERAL=52, REAL_LITERAL=53, CHARACTER_LITERAL=54, 
		REGULAR_STRING=55, VERBATIUM_STRING=56, INTERPOLATED_REGULAR_STRING_START=57, 
		INTERPOLATED_VERBATIUM_STRING_START=58, OPEN_BRACE=59, CLOSE_BRACE=60, 
		OPEN_BRACKET=61, CLOSE_BRACKET=62, OPEN_PARENS=63, CLOSE_PARENS=64, DOT=65, 
		COMMA=66, COLON=67, SEMICOLON=68, PLUS=69, MINUS=70, STAR=71, DIV=72, 
		PERCENT=73, AMP=74, BITWISE_OR=75, CARET=76, BANG=77, TILDE=78, ASSIGNMENT=79, 
		LT=80, GT=81, INTERR=82, DOUBLE_COLON=83, OP_COALESCING=84, OP_INC=85, 
		OP_DEC=86, OP_AND=87, OP_OR=88, OP_PTR=89, OP_EQ=90, OP_NE=91, OP_LE=92, 
		OP_GE=93, OP_ADD_ASSIGNMENT=94, OP_SUB_ASSIGNMENT=95, OP_MULT_ASSIGNMENT=96, 
		OP_DIV_ASSIGNMENT=97, OP_MOD_ASSIGNMENT=98, OP_AND_ASSIGNMENT=99, OP_OR_ASSIGNMENT=100, 
		OP_XOR_ASSIGNMENT=101, OP_LEFT_SHIFT=102, OP_LEFT_SHIFT_ASSIGNMENT=103, 
		OP_COALESCING_ASSIGNMENT=104, OP_RANGE=105, DOUBLE_CURLY_INSIDE=106, OPEN_BRACE_INSIDE=107, 
		REGULAR_CHAR_INSIDE=108, VERBATIUM_DOUBLE_QUOTE_INSIDE=109, DOUBLE_QUOTE_INSIDE=110, 
		REGULAR_STRING_INSIDE=111, VERBATIUM_INSIDE_STRING=112, CLOSE_BRACE_INSIDE=113, 
		FORMAT_STRING=114, DIRECTIVE_WHITESPACES=115, DIGITS=116, DEFINE=117, 
		UNDEF=118, ELIF=119, ENDIF=120, LINE=121, ERROR=122, WARNING=123, REGION=124, 
		ENDREGION=125, PRAGMA=126, NULLABLE=127, DIRECTIVE_HIDDEN=128, CONDITIONAL_SYMBOL=129, 
		DIRECTIVE_NEW_LINE=130, TEXT=131, DOUBLE_CURLY_CLOSE_INSIDE=132;
	public const int
		RULE_compilation_unit = 0, RULE_namespace_or_type_name = 1, RULE_type_ = 2, 
		RULE_base_type = 3, RULE_tuple_type = 4, RULE_tuple_element = 5, RULE_simple_type = 6, 
		RULE_numeric_type = 7, RULE_integral_type = 8, RULE_class_type = 9, RULE_type_argument_list = 10, 
		RULE_argument_list = 11, RULE_argument = 12, RULE_expression = 13, RULE_non_assignment_expression = 14, 
		RULE_assignment = 15, RULE_assignment_operator = 16, RULE_conditional_expression = 17, 
		RULE_null_coalescing_expression = 18, RULE_conditional_or_expression = 19, 
		RULE_conditional_and_expression = 20, RULE_inclusive_or_expression = 21, 
		RULE_exclusive_or_expression = 22, RULE_and_expression = 23, RULE_equality_expression = 24, 
		RULE_relational_expression = 25, RULE_shift_expression = 26, RULE_additive_expression = 27, 
		RULE_multiplicative_expression = 28, RULE_switch_expression = 29, RULE_switch_expression_arms = 30, 
		RULE_switch_expression_arm = 31, RULE_range_expression = 32, RULE_unary_expression = 33, 
		RULE_cast_expression = 34, RULE_primary_expression = 35, RULE_primary_expression_start = 36, 
		RULE_throwable_expression = 37, RULE_throw_expression = 38, RULE_member_access = 39, 
		RULE_bracket_expression = 40, RULE_indexer_argument = 41, RULE_predefined_type = 42, 
		RULE_expression_list = 43, RULE_object_or_collection_initializer = 44, 
		RULE_object_initializer = 45, RULE_member_initializer_list = 46, RULE_member_initializer = 47, 
		RULE_initializer_value = 48, RULE_collection_initializer = 49, RULE_element_initializer = 50, 
		RULE_anonymous_object_initializer = 51, RULE_member_declarator_list = 52, 
		RULE_member_declarator = 53, RULE_unbound_type_name = 54, RULE_generic_dimension_specifier = 55, 
		RULE_isType = 56, RULE_isTypePatternArms = 57, RULE_isTypePatternArm = 58, 
		RULE_lambda_expression = 59, RULE_anonymous_function_signature = 60, RULE_explicit_anonymous_function_parameter_list = 61, 
		RULE_explicit_anonymous_function_parameter = 62, RULE_implicit_anonymous_function_parameter_list = 63, 
		RULE_anonymous_function_body = 64, RULE_statement = 65, RULE_declarationStatement = 66, 
		RULE_local_function_modifiers = 67, RULE_local_function_body = 68, RULE_labeled_Statement = 69, 
		RULE_embedded_statement = 70, RULE_simple_embedded_statement = 71, RULE_block = 72, 
		RULE_local_variable_declaration = 73, RULE_local_variable_type = 74, RULE_local_variable_declarator = 75, 
		RULE_local_variable_initializer = 76, RULE_local_constant_declaration = 77, 
		RULE_if_body = 78, RULE_switch_section = 79, RULE_switch_label = 80, RULE_case_guard = 81, 
		RULE_statement_list = 82, RULE_for_initializer = 83, RULE_for_iterator = 84, 
		RULE_catch_clauses = 85, RULE_specific_catch_clause = 86, RULE_general_catch_clause = 87, 
		RULE_exception_filter = 88, RULE_namespace_declaration = 89, RULE_qualified_identifier = 90, 
		RULE_namespace_body = 91, RULE_extern_alias_directives = 92, RULE_extern_alias_directive = 93, 
		RULE_using_directives = 94, RULE_using_directive = 95, RULE_namespace_member_declarations = 96, 
		RULE_namespace_member_declaration = 97, RULE_type_declaration = 98, RULE_qualified_alias_member = 99, 
		RULE_type_parameter_list = 100, RULE_type_parameter = 101, RULE_class_base = 102, 
		RULE_interface_type_list = 103, RULE_type_parameter_constraints_clauses = 104, 
		RULE_type_parameter_constraints_clause = 105, RULE_type_parameter_constraints = 106, 
		RULE_primary_constraint = 107, RULE_secondary_constraints = 108, RULE_constructor_constraint = 109, 
		RULE_class_body = 110, RULE_class_member_declarations = 111, RULE_class_member_declaration = 112, 
		RULE_all_member_modifiers = 113, RULE_all_member_modifier = 114, RULE_common_member_declaration = 115, 
		RULE_typed_member_declaration = 116, RULE_constant_declarators = 117, 
		RULE_constant_declarator = 118, RULE_variable_declarators = 119, RULE_variable_declarator = 120, 
		RULE_variable_initializer = 121, RULE_return_type = 122, RULE_member_name = 123, 
		RULE_method_body = 124, RULE_formal_parameter_list = 125, RULE_fixed_parameters = 126, 
		RULE_fixed_parameter = 127, RULE_parameter_modifier = 128, RULE_parameter_array = 129, 
		RULE_overloadable_operator = 130, RULE_constructor_initializer = 131, 
		RULE_body = 132, RULE_array_type = 133, RULE_rank_specifier = 134, RULE_array_initializer = 135, 
		RULE_variant_type_parameter_list = 136, RULE_variant_type_parameter = 137, 
		RULE_enum_base = 138, RULE_enum_body = 139, RULE_enum_member_declaration = 140, 
		RULE_global_attribute_section = 141, RULE_global_attribute_target = 142, 
		RULE_attributes = 143, RULE_attribute_section = 144, RULE_attribute_target = 145, 
		RULE_attribute_list = 146, RULE_attribute = 147, RULE_attribute_argument = 148, 
		RULE_right_arrow = 149, RULE_right_shift = 150, RULE_right_shift_assignment = 151, 
		RULE_literal = 152, RULE_boolean_literal = 153, RULE_string_literal = 154, 
		RULE_interpolated_regular_string = 155, RULE_interpolated_verbatium_string = 156, 
		RULE_interpolated_regular_string_part = 157, RULE_interpolated_verbatium_string_part = 158, 
		RULE_interpolated_string_expression = 159, RULE_keyword = 160, RULE_class_definition = 161, 
		RULE_enum_definition = 162, RULE_function_definition = 163, RULE_field_declaration = 164, 
		RULE_constant_declaration = 165, RULE_destructor_definition = 166, RULE_constructor_declaration = 167, 
		RULE_method_declaration = 168, RULE_method_member_name = 169, RULE_arg_declaration = 170, 
		RULE_method_invocation = 171, RULE_object_creation_expression = 172, RULE_identifier = 173;
	public static readonly string[] ruleNames = {
		"compilation_unit", "namespace_or_type_name", "type_", "base_type", "tuple_type", 
		"tuple_element", "simple_type", "numeric_type", "integral_type", "class_type", 
		"type_argument_list", "argument_list", "argument", "expression", "non_assignment_expression", 
		"assignment", "assignment_operator", "conditional_expression", "null_coalescing_expression", 
		"conditional_or_expression", "conditional_and_expression", "inclusive_or_expression", 
		"exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"switch_expression", "switch_expression_arms", "switch_expression_arm", 
		"range_expression", "unary_expression", "cast_expression", "primary_expression", 
		"primary_expression_start", "throwable_expression", "throw_expression", 
		"member_access", "bracket_expression", "indexer_argument", "predefined_type", 
		"expression_list", "object_or_collection_initializer", "object_initializer", 
		"member_initializer_list", "member_initializer", "initializer_value", 
		"collection_initializer", "element_initializer", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
		"isType", "isTypePatternArms", "isTypePatternArm", "lambda_expression", 
		"anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
		"anonymous_function_body", "statement", "declarationStatement", "local_function_modifiers", 
		"local_function_body", "labeled_Statement", "embedded_statement", "simple_embedded_statement", 
		"block", "local_variable_declaration", "local_variable_type", "local_variable_declarator", 
		"local_variable_initializer", "local_constant_declaration", "if_body", 
		"switch_section", "switch_label", "case_guard", "statement_list", "for_initializer", 
		"for_iterator", "catch_clauses", "specific_catch_clause", "general_catch_clause", 
		"exception_filter", "namespace_declaration", "qualified_identifier", "namespace_body", 
		"extern_alias_directives", "extern_alias_directive", "using_directives", 
		"using_directive", "namespace_member_declarations", "namespace_member_declaration", 
		"type_declaration", "qualified_alias_member", "type_parameter_list", "type_parameter", 
		"class_base", "interface_type_list", "type_parameter_constraints_clauses", 
		"type_parameter_constraints_clause", "type_parameter_constraints", "primary_constraint", 
		"secondary_constraints", "constructor_constraint", "class_body", "class_member_declarations", 
		"class_member_declaration", "all_member_modifiers", "all_member_modifier", 
		"common_member_declaration", "typed_member_declaration", "constant_declarators", 
		"constant_declarator", "variable_declarators", "variable_declarator", 
		"variable_initializer", "return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
		"overloadable_operator", "constructor_initializer", "body", "array_type", 
		"rank_specifier", "array_initializer", "variant_type_parameter_list", 
		"variant_type_parameter", "enum_base", "enum_body", "enum_member_declaration", 
		"global_attribute_section", "global_attribute_target", "attributes", "attribute_section", 
		"attribute_target", "attribute_list", "attribute", "attribute_argument", 
		"right_arrow", "right_shift", "right_shift_assignment", "literal", "boolean_literal", 
		"string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
		"interpolated_regular_string_part", "interpolated_verbatium_string_part", 
		"interpolated_string_expression", "keyword", "class_definition", "enum_definition", 
		"function_definition", "field_declaration", "constant_declaration", "destructor_definition", 
		"constructor_declaration", "method_declaration", "method_member_name", 
		"arg_declaration", "method_invocation", "object_creation_expression", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u00EF\\u00BB\\u00BF'", null, "'/***/'", null, null, null, null, 
		"'#'", "'bool'", "'char'", "'int'", "'num'", "'string'", "'value'", "'void'", 
		"'false'", "'true'", "'null'", "'new'", "'constant'", "'class'", "'enum'", 
		"'base'", "'import'", "'private'", "'protected'", "'public'", "'static'", 
		"'directory'", "'override'", "'if'", "'else'", "'switch'", "'case'", "'default'", 
		"'for'", "'while'", "'do'", "'stop'", "'start'", "'skip'", "'try'", "'catch'", 
		"'throw'", "'function'", "'return'", "'this'", null, null, null, null, 
		null, null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", "'??='", "'..'", "'{{'", null, null, null, null, 
		null, null, null, null, null, null, "'define'", "'undef'", "'elif'", "'endif'", 
		"'line'", null, null, null, null, null, null, "'hidden'", null, null, 
		null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "EMPTY_DELIMITED_DOC_COMMENT", 
		"DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"SHARP", "BOOL", "CHAR", "INT", "NUM", "STRING", "VALUE", "VOID", "FALSE", 
		"TRUE", "NULL_", "NEW", "CONSTANT", "CLASS", "ENUM", "BASE", "IMPORT", 
		"PRIVATE", "PROTECTED", "PUBLIC", "STATIC", "DIRECTORY", "OVERRIDE", "IF", 
		"ELSE", "SWITCH", "CASE", "DEFAULT", "FOR", "WHILE", "DO", "STOP", "START", 
		"SKIP_", "TRY", "CATCH", "THROW", "FUNCTION", "RETURN", "THIS", "IDENTIFIER", 
		"LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
		"REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", 
		"INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", 
		"VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
		"VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
		"DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", 
		"REGION", "ENDREGION", "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
		"DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UpsilonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UpsilonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UpsilonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UpsilonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(UpsilonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(UpsilonParser.BYTE_ORDER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 348;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 351;
				extern_alias_directives();
				}
			}

			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPORT) {
				{
				State = 354;
				using_directives();
				}
			}

			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 357;
					global_attribute_section();
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305878195706527744L) != 0)) {
				{
				State = 363;
				namespace_member_declarations();
				}
			}

			State = 366;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(UpsilonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(UpsilonParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_or_type_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 368;
				identifier();
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 369;
					type_argument_list();
					}
				}

				}
				break;
			case 2:
				{
				State = 372;
				qualified_alias_member();
				}
				break;
			}
			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 375;
					Match(DOT);
					State = 376;
					identifier();
					State = 378;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 377;
						type_argument_list();
						}
					}

					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(UpsilonParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(UpsilonParser.INTERR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(UpsilonParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(UpsilonParser.STAR, i);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 4, RULE_type_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			base_type();
			State = 391;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 389;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERR:
						{
						State = 386;
						Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 387;
						rank_specifier();
						}
						break;
					case STAR:
						{
						State = 388;
						Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(UpsilonParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(UpsilonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_base_type);
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				simple_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				class_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 396;
				Match(VOID);
				State = 397;
				Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 398;
				tuple_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_elementContext[] tuple_element() {
			return GetRuleContexts<Tuple_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_elementContext tuple_element(int i) {
			return GetRuleContext<Tuple_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Tuple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterTuple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitTuple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_typeContext tuple_type() {
		Tuple_typeContext _localctx = new Tuple_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_tuple_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(OPEN_PARENS);
			State = 402;
			tuple_element();
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 403;
				Match(COMMA);
				State = 404;
				tuple_element();
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 409;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Tuple_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterTuple_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitTuple_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_elementContext tuple_element() {
		Tuple_elementContext _localctx = new Tuple_elementContext(Context, State);
		EnterRule(_localctx, 10, RULE_tuple_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			type_();
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 412;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UpsilonParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simple_type);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415;
				numeric_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				Match(BOOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(UpsilonParser.NUM, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_numeric_type);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419;
				integral_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420;
				Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UpsilonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(UpsilonParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_integral_type);
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425;
				Match(CHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(UpsilonParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UpsilonParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_class_type);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				namespace_or_type_name();
				}
				break;
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				Match(VALUE);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UpsilonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(LT);
			State = 434;
			type_();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 435;
				Match(COMMA);
				State = 436;
				type_();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 442;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			argument();
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 445;
				Match(COMMA);
				State = 446;
				argument();
				}
				}
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 452;
				identifier();
				State = 453;
				Match(COLON);
				}
				break;
			}
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 457;
				expression();
				}
				break;
			case 2:
				{
				{
				State = 458;
				type_();
				}
				State = 459;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464;
				non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_non_assignment_expression);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467;
				lambda_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ASSIGNMENT() { return GetToken(UpsilonParser.OP_COALESCING_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignment);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				unary_expression();
				State = 472;
				assignment_operator();
				State = 473;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				unary_expression();
				State = 476;
				Match(OP_COALESCING_ASSIGNMENT);
				State = 477;
				throwable_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(UpsilonParser.OP_ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(UpsilonParser.OP_SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(UpsilonParser.OP_MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(UpsilonParser.OP_DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(UpsilonParser.OP_MOD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(UpsilonParser.OP_AND_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(UpsilonParser.OP_OR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(UpsilonParser.OP_XOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(UpsilonParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment_operator);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481;
				Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482;
				Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 483;
				Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 484;
				Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 485;
				Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 486;
				Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 487;
				Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 488;
				Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 489;
				Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 490;
				Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 491;
				right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(UpsilonParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext[] throwable_expression() {
			return GetRuleContexts<Throwable_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression(int i) {
			return GetRuleContext<Throwable_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_conditional_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			null_coalescing_expression();
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 495;
				Match(INTERR);
				State = 496;
				throwable_expression();
				State = 497;
				Match(COLON);
				State = 498;
				throwable_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING() { return GetToken(UpsilonParser.OP_COALESCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_expressionContext throw_expression() {
			return GetRuleContext<Throw_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			conditional_or_expression();
			State = 508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 503;
				Match(OP_COALESCING);
				State = 506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOL:
				case CHAR:
				case INT:
				case NUM:
				case STRING:
				case VALUE:
				case FALSE:
				case TRUE:
				case NULL_:
				case NEW:
				case BASE:
				case DEFAULT:
				case SKIP_:
				case THIS:
				case IDENTIFIER:
				case LITERAL_ACCESS:
				case INTEGER_LITERAL:
				case HEX_INTEGER_LITERAL:
				case BIN_INTEGER_LITERAL:
				case REAL_LITERAL:
				case CHARACTER_LITERAL:
				case REGULAR_STRING:
				case VERBATIUM_STRING:
				case INTERPOLATED_REGULAR_STRING_START:
				case INTERPOLATED_VERBATIUM_STRING_START:
				case OPEN_PARENS:
				case PLUS:
				case MINUS:
				case STAR:
				case AMP:
				case CARET:
				case TILDE:
				case OP_INC:
				case OP_DEC:
				case OP_RANGE:
					{
					State = 504;
					null_coalescing_expression();
					}
					break;
				case THROW:
					{
					State = 505;
					throw_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_OR() { return GetTokens(UpsilonParser.OP_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR(int i) {
			return GetToken(UpsilonParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditional_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			conditional_and_expression();
			State = 515;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 511;
					Match(OP_OR);
					State = 512;
					conditional_and_expression();
					}
					} 
				}
				State = 517;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_AND() { return GetTokens(UpsilonParser.OP_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND(int i) {
			return GetToken(UpsilonParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditional_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			inclusive_or_expression();
			State = 523;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 519;
					Match(OP_AND);
					State = 520;
					inclusive_or_expression();
					}
					} 
				}
				State = 525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_OR() { return GetTokens(UpsilonParser.BITWISE_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR(int i) {
			return GetToken(UpsilonParser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_inclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			exclusive_or_expression();
			State = 531;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 527;
					Match(BITWISE_OR);
					State = 528;
					exclusive_or_expression();
					}
					} 
				}
				State = 533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(UpsilonParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(UpsilonParser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_exclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			and_expression();
			State = 539;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 535;
					Match(CARET);
					State = 536;
					and_expression();
					}
					} 
				}
				State = 541;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMP() { return GetTokens(UpsilonParser.AMP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP(int i) {
			return GetToken(UpsilonParser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			equality_expression();
			State = 547;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 543;
					Match(AMP);
					State = 544;
					equality_expression();
					}
					} 
				}
				State = 549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_EQ() { return GetTokens(UpsilonParser.OP_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ(int i) {
			return GetToken(UpsilonParser.OP_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_NE() { return GetTokens(UpsilonParser.OP_NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE(int i) {
			return GetToken(UpsilonParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			relational_expression();
			State = 555;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 551;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_EQ || _la==OP_NE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 552;
					relational_expression();
					}
					} 
				}
				State = 557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(UpsilonParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(UpsilonParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(UpsilonParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(UpsilonParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LE() { return GetTokens(UpsilonParser.OP_LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE(int i) {
			return GetToken(UpsilonParser.OP_LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_GE() { return GetTokens(UpsilonParser.OP_GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE(int i) {
			return GetToken(UpsilonParser.OP_GE, i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_relational_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			shift_expression();
			State = 563;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 559;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 12291L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 560;
					shift_expression();
					}
					} 
				}
				State = 565;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(UpsilonParser.OP_LEFT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(UpsilonParser.OP_LEFT_SHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			additive_expression();
			State = 574;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 569;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 567;
						Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 568;
						right_shift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 571;
					additive_expression();
					}
					} 
				}
				State = 576;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(UpsilonParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(UpsilonParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(UpsilonParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(UpsilonParser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			multiplicative_expression();
			State = 582;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 578;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 579;
					multiplicative_expression();
					}
					} 
				}
				State = 584;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext[] switch_expression() {
			return GetRuleContexts<Switch_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext switch_expression(int i) {
			return GetRuleContext<Switch_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(UpsilonParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(UpsilonParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(UpsilonParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(UpsilonParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(UpsilonParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(UpsilonParser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_multiplicative_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			switch_expression();
			State = 590;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 586;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 587;
					switch_expression();
					}
					} 
				}
				State = 592;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_expressionContext range_expression() {
			return GetRuleContext<Range_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(UpsilonParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armsContext switch_expression_arms() {
			return GetRuleContext<Switch_expression_armsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(UpsilonParser.COMMA, 0); }
		public Switch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expressionContext switch_expression() {
		Switch_expressionContext _localctx = new Switch_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_switch_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			range_expression();
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 594;
				Match(SWITCH);
				State = 595;
				Match(OPEN_BRACE);
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 596;
					switch_expression_arms();
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 597;
						Match(COMMA);
						}
					}

					}
				}

				State = 602;
				Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expression_armsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armContext[] switch_expression_arm() {
			return GetRuleContexts<Switch_expression_armContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armContext switch_expression_arm(int i) {
			return GetRuleContext<Switch_expression_armContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Switch_expression_armsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression_arms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression_arms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression_arms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_expression_arms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expression_armsContext switch_expression_arms() {
		Switch_expression_armsContext _localctx = new Switch_expression_armsContext(Context, State);
		EnterRule(_localctx, 60, RULE_switch_expression_arms);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			switch_expression_arm();
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 606;
					Match(COMMA);
					State = 607;
					switch_expression_arm();
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expression_armContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_guardContext case_guard() {
			return GetRuleContext<Case_guardContext>(0);
		}
		public Switch_expression_armContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression_arm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression_arm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression_arm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_expression_arm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expression_armContext switch_expression_arm() {
		Switch_expression_armContext _localctx = new Switch_expression_armContext(Context, State);
		EnterRule(_localctx, 62, RULE_switch_expression_arm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			expression();
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
				{
				State = 614;
				case_guard();
				}
			}

			State = 617;
			right_arrow();
			State = 618;
			throwable_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(UpsilonParser.OP_RANGE, 0); }
		public Range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_expressionContext range_expression() {
		Range_expressionContext _localctx = new Range_expressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_range_expression);
		int _la;
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 620;
				unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 197287L) != 0)) {
					{
					State = 621;
					unary_expression();
					}
				}

				State = 624;
				Match(OP_RANGE);
				State = 626;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 625;
					unary_expression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UpsilonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UpsilonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(UpsilonParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(UpsilonParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(UpsilonParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(UpsilonParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(UpsilonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(UpsilonParser.CARET, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_unary_expression);
		try {
			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630;
				cast_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631;
				primary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 632;
				Match(PLUS);
				State = 633;
				unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 634;
				Match(MINUS);
				State = 635;
				unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 636;
				Match(TILDE);
				State = 637;
				unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 638;
				Match(OP_INC);
				State = 639;
				unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 640;
				Match(OP_DEC);
				State = 641;
				unary_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 642;
				Match(AMP);
				State = 643;
				unary_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 644;
				Match(STAR);
				State = 645;
				unary_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 646;
				Match(CARET);
				State = 647;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(OPEN_PARENS);
			State = 651;
			type_();
			State = 652;
			Match(CLOSE_PARENS);
			State = 653;
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BANG() { return GetTokens(UpsilonParser.BANG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG(int i) {
			return GetToken(UpsilonParser.BANG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_INC() { return GetTokens(UpsilonParser.OP_INC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC(int i) {
			return GetToken(UpsilonParser.OP_INC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_DEC() { return GetTokens(UpsilonParser.OP_DEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC(int i) {
			return GetToken(UpsilonParser.OP_DEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_PTR() { return GetTokens(UpsilonParser.OP_PTR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PTR(int i) {
			return GetToken(UpsilonParser.OP_PTR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			_localctx.pe = primary_expression_start();
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 656;
				Match(BANG);
				}
				break;
			}
			State = 662;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 659;
					bracket_expression();
					}
					} 
				}
				State = 664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 665;
				Match(BANG);
				}
				break;
			}
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 674;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
					case INTERR:
						{
						State = 668;
						member_access();
						}
						break;
					case OPEN_PARENS:
						{
						State = 669;
						method_invocation();
						}
						break;
					case OP_INC:
						{
						State = 670;
						Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 671;
						Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 672;
						Match(OP_PTR);
						State = 673;
						identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 677;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						State = 676;
						Match(BANG);
						}
						break;
					}
					State = 682;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 679;
							bracket_expression();
							}
							} 
						}
						State = 684;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
					}
					State = 686;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						State = 685;
						Match(BANG);
						}
						break;
					}
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisReferenceExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(UpsilonParser.THIS, 0); }
		public ThisReferenceExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(UpsilonParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		public ObjectCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_ACCESS() { return GetToken(UpsilonParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public TupleExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(UpsilonParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		public DefaultValueExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public MemberAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(UpsilonParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UpsilonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public BaseAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBaseAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBaseAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 72, RULE_primary_expression_start);
		int _la;
		try {
			int _alt;
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 693;
				literal();
				}
				break;
			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 694;
				identifier();
				State = 696;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 695;
					type_argument_list();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 698;
				Match(OPEN_PARENS);
				State = 699;
				expression();
				State = 700;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 702;
				predefined_type();
				}
				break;
			case 5:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 703;
				qualified_alias_member();
				}
				break;
			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 704;
				Match(LITERAL_ACCESS);
				}
				break;
			case 7:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 705;
				Match(THIS);
				}
				break;
			case 8:
				_localctx = new BaseAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 706;
				Match(BASE);
				State = 716;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 707;
					Match(DOT);
					State = 708;
					identifier();
					State = 710;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						State = 709;
						type_argument_list();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 712;
					Match(OPEN_BRACKET);
					State = 713;
					expression_list();
					State = 714;
					Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				_localctx = new ObjectCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 718;
				Match(NEW);
				State = 747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 719;
					type_();
					State = 741;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						State = 720;
						object_creation_expression();
						}
						break;
					case 2:
						{
						State = 721;
						object_or_collection_initializer();
						}
						break;
					case 3:
						{
						State = 722;
						Match(OPEN_BRACKET);
						State = 723;
						expression_list();
						State = 724;
						Match(CLOSE_BRACKET);
						State = 728;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 725;
								rank_specifier();
								}
								} 
							}
							State = 730;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
						}
						State = 732;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
						case 1:
							{
							State = 731;
							array_initializer();
							}
							break;
						}
						}
						break;
					case 4:
						{
						State = 735;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 734;
							rank_specifier();
							}
							}
							State = 737;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==OPEN_BRACKET );
						State = 739;
						array_initializer();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 743;
					anonymous_object_initializer();
					}
					break;
				case 3:
					{
					State = 744;
					rank_specifier();
					State = 745;
					array_initializer();
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 749;
				Match(OPEN_PARENS);
				State = 750;
				argument();
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 751;
					Match(COMMA);
					State = 752;
					argument();
					}
					}
					State = 755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 757;
				Match(CLOSE_PARENS);
				}
				break;
			case 11:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 759;
				Match(DEFAULT);
				State = 764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 760;
					Match(OPEN_PARENS);
					State = 761;
					type_();
					State = 762;
					Match(CLOSE_PARENS);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throwable_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_expressionContext throw_expression() {
			return GetRuleContext<Throw_expressionContext>(0);
		}
		public Throwable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwable_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterThrowable_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitThrowable_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowable_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throwable_expressionContext throwable_expression() {
		Throwable_expressionContext _localctx = new Throwable_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_throwable_expression);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 768;
				expression();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 769;
				throw_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(UpsilonParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterThrow_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitThrow_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_expressionContext throw_expression() {
		Throw_expressionContext _localctx = new Throw_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_throw_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(THROW);
			State = 773;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UpsilonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(UpsilonParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 78, RULE_member_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 775;
				Match(INTERR);
				}
			}

			State = 778;
			Match(DOT);
			State = 779;
			identifier();
			State = 781;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 780;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_argumentContext[] indexer_argument() {
			return GetRuleContexts<Indexer_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_argumentContext indexer_argument(int i) {
			return GetRuleContext<Indexer_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(UpsilonParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 783;
				Match(INTERR);
				}
			}

			State = 786;
			Match(OPEN_BRACKET);
			State = 787;
			indexer_argument();
			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 788;
				Match(COMMA);
				State = 789;
				indexer_argument();
				}
				}
				State = 794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 795;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		public Indexer_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIndexer_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIndexer_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentContext indexer_argument() {
		Indexer_argumentContext _localctx = new Indexer_argumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexer_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 797;
				identifier();
				State = 798;
				Match(COLON);
				}
				break;
			}
			State = 802;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UpsilonParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(UpsilonParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(UpsilonParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UpsilonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(UpsilonParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UpsilonParser.STRING, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32256L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 86, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			expression();
			State = 811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 807;
				Match(COMMA);
				State = 808;
				expression();
				}
				}
				State = 813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_or_collection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 88, RULE_object_or_collection_initializer);
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 814;
				object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(UpsilonParser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(OPEN_BRACE);
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2306126683213660160L) != 0)) {
				{
				State = 819;
				member_initializer_list();
				State = 821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 820;
					Match(COMMA);
					}
				}

				}
			}

			State = 825;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(Context, State);
		EnterRule(_localctx, 92, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			member_initializer();
			State = 832;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 828;
					Match(COMMA);
					State = 829;
					member_initializer();
					}
					} 
				}
				State = 834;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_:
			case IDENTIFIER:
				{
				State = 835;
				identifier();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 836;
				Match(OPEN_BRACKET);
				State = 837;
				expression();
				State = 838;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 842;
			Match(ASSIGNMENT);
			State = 843;
			initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 96, RULE_initializer_value);
		try {
			State = 847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 845;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 846;
				object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_collection_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(OPEN_BRACE);
			State = 850;
			element_initializer();
			State = 855;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 851;
					Match(COMMA);
					State = 852;
					element_initializer();
					}
					} 
				}
				State = 857;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			State = 859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 858;
				Match(COMMA);
				}
			}

			State = 861;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 100, RULE_element_initializer);
		try {
			State = 868;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 863;
				non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 864;
				Match(OPEN_BRACE);
				State = 865;
				expression_list();
				State = 866;
				Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(UpsilonParser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 102, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			Match(OPEN_BRACE);
			State = 875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0)) {
				{
				State = 871;
				member_declarator_list();
				State = 873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 872;
					Match(COMMA);
					}
				}

				}
			}

			State = 877;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(Context, State);
		EnterRule(_localctx, 104, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			member_declarator();
			State = 884;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 880;
					Match(COMMA);
					State = 881;
					member_declarator();
					}
					} 
				}
				State = 886;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(Context, State);
		EnterRule(_localctx, 106, RULE_member_declarator);
		try {
			State = 892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888;
				identifier();
				State = 889;
				Match(ASSIGNMENT);
				State = 890;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(UpsilonParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(UpsilonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(UpsilonParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(Context, State);
		EnterRule(_localctx, 108, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			identifier();
			State = 903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case DOT:
			case LT:
				{
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 895;
					generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 898;
				Match(DOUBLE_COLON);
				State = 899;
				identifier();
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 900;
					generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 905;
				Match(DOT);
				State = 906;
				identifier();
				State = 908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 907;
					generic_dimension_specifier();
					}
				}

				}
				}
				State = 914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UpsilonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(Context, State);
		EnterRule(_localctx, 110, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(LT);
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 916;
				Match(COMMA);
				}
				}
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 922;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(UpsilonParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(UpsilonParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(UpsilonParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmsContext isTypePatternArms() {
			return GetRuleContext<IsTypePatternArmsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_isType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			base_type();
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET || _la==STAR) {
				{
				State = 927;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_BRACKET:
					{
					State = 925;
					rank_specifier();
					}
					break;
				case STAR:
					{
					State = 926;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 932;
				Match(INTERR);
				}
			}

			State = 936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 935;
				isTypePatternArms();
				}
			}

			State = 939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 938;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmContext[] isTypePatternArm() {
			return GetRuleContexts<IsTypePatternArmContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmContext isTypePatternArm(int i) {
			return GetRuleContext<IsTypePatternArmContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public IsTypePatternArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTypePatternArms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmsContext isTypePatternArms() {
		IsTypePatternArmsContext _localctx = new IsTypePatternArmsContext(Context, State);
		EnterRule(_localctx, 114, RULE_isTypePatternArms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			Match(OPEN_BRACE);
			State = 942;
			isTypePatternArm();
			State = 947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 943;
				Match(COMMA);
				State = 944;
				isTypePatternArm();
				}
				}
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 950;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTypePatternArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTypePatternArm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmContext isTypePatternArm() {
		IsTypePatternArmContext _localctx = new IsTypePatternArmContext(Context, State);
		EnterRule(_localctx, 116, RULE_isTypePatternArm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			identifier();
			State = 953;
			Match(COLON);
			State = 954;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			anonymous_function_signature();
			State = 957;
			right_arrow();
			State = 958;
			anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 120, RULE_anonymous_function_signature);
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				Match(OPEN_PARENS);
				State = 961;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 962;
				Match(OPEN_PARENS);
				State = 963;
				explicit_anonymous_function_parameter_list();
				State = 964;
				Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 966;
				Match(OPEN_PARENS);
				State = 967;
				implicit_anonymous_function_parameter_list();
				State = 968;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 970;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			explicit_anonymous_function_parameter();
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 974;
				Match(COMMA);
				State = 975;
				explicit_anonymous_function_parameter();
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 124, RULE_explicit_anonymous_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			type_();
			State = 982;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 126, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			identifier();
			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 985;
				Match(COMMA);
				State = 986;
				identifier();
				}
				}
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_anonymous_function_body);
		try {
			State = 994;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THROW:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 992;
				throwable_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 993;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_StatementContext labeled_Statement() {
			return GetRuleContext<Labeled_StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_statement);
		try {
			State = 999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 996;
				labeled_Statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 997;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 998;
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_declarationStatement);
		try {
			State = 1007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case VOID:
			case SKIP_:
			case IDENTIFIER:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case STAR:
			case INTERR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1001;
				local_variable_declaration();
				State = 1002;
				Match(SEMICOLON);
				}
				break;
			case CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004;
				local_constant_declaration();
				State = 1005;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(UpsilonParser.STATIC, 0); }
		public Local_function_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_modifiersContext local_function_modifiers() {
		Local_function_modifiersContext _localctx = new Local_function_modifiersContext(Context, State);
		EnterRule(_localctx, 134, RULE_local_function_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 1009;
				Match(STATIC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Local_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_bodyContext local_function_body() {
		Local_function_bodyContext _localctx = new Local_function_bodyContext(Context, State);
		EnterRule(_localctx, 136, RULE_local_function_body);
		try {
			State = 1017;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1012;
				block();
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013;
				right_arrow();
				State = 1014;
				throwable_expression();
				State = 1015;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_Statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLabeled_Statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLabeled_Statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeled_Statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_StatementContext labeled_Statement() {
		Labeled_StatementContext _localctx = new Labeled_StatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_labeled_Statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019;
			identifier();
			State = 1020;
			Match(COLON);
			State = 1021;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 140, RULE_embedded_statement);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023;
				block();
				}
				break;
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case IF:
			case SWITCH:
			case DEFAULT:
			case FOR:
			case WHILE:
			case DO:
			case STOP:
			case START:
			case SKIP_:
			case TRY:
			case THROW:
			case RETURN:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1024;
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TryStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(UpsilonParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public TryStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(UpsilonParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TheEmptyStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public TheEmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterTheEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitTheEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UpsilonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(UpsilonParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(UpsilonParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(UpsilonParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UpsilonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(UpsilonParser.ELSE, 0); }
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UpsilonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(UpsilonParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UpsilonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(UpsilonParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UpsilonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(UpsilonParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(UpsilonParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UpsilonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(UpsilonParser.STOP, 0); }
		public YieldStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 142, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				_localctx = new TheEmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1027;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1028;
				expression();
				State = 1029;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1031;
				Match(IF);
				State = 1032;
				Match(OPEN_PARENS);
				State = 1033;
				expression();
				State = 1034;
				Match(CLOSE_PARENS);
				State = 1035;
				if_body();
				State = 1038;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
				case 1:
					{
					State = 1036;
					Match(ELSE);
					State = 1037;
					if_body();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1040;
				Match(SWITCH);
				State = 1041;
				Match(OPEN_PARENS);
				State = 1042;
				expression();
				State = 1043;
				Match(CLOSE_PARENS);
				State = 1044;
				Match(OPEN_BRACE);
				State = 1048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1045;
					switch_section();
					}
					}
					State = 1050;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1051;
				Match(CLOSE_BRACE);
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1053;
				Match(WHILE);
				State = 1054;
				Match(OPEN_PARENS);
				State = 1055;
				expression();
				State = 1056;
				Match(CLOSE_PARENS);
				State = 1057;
				embedded_statement();
				}
				break;
			case 6:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1059;
				Match(DO);
				State = 1060;
				embedded_statement();
				State = 1061;
				Match(WHILE);
				State = 1062;
				Match(OPEN_PARENS);
				State = 1063;
				expression();
				State = 1064;
				Match(CLOSE_PARENS);
				State = 1065;
				Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1067;
				Match(FOR);
				State = 1068;
				Match(OPEN_PARENS);
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6341206779433583104L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719682215L) != 0)) {
					{
					State = 1069;
					for_initializer();
					}
				}

				State = 1072;
				Match(SEMICOLON);
				State = 1074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 1073;
					expression();
					}
				}

				State = 1076;
				Match(SEMICOLON);
				State = 1078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 1077;
					for_iterator();
					}
				}

				State = 1080;
				Match(CLOSE_PARENS);
				State = 1081;
				embedded_statement();
				}
				break;
			case 8:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1082;
				Match(STOP);
				State = 1083;
				Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1084;
				Match(START);
				State = 1085;
				Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1086;
				Match(RETURN);
				State = 1088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 1087;
					expression();
					}
				}

				State = 1090;
				Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1091;
				Match(THROW);
				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 1092;
					expression();
					}
				}

				State = 1095;
				Match(SEMICOLON);
				}
				break;
			case 12:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1096;
				Match(TRY);
				State = 1097;
				block();
				{
				State = 1098;
				catch_clauses();
				}
				}
				break;
			case 13:
				_localctx = new YieldStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1100;
				Match(SKIP_);
				State = 1104;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RETURN:
					{
					State = 1101;
					Match(RETURN);
					State = 1102;
					expression();
					}
					break;
				case STOP:
					{
					State = 1103;
					Match(STOP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1106;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 144, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			Match(OPEN_BRACE);
			State = 1111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5764651527111180800L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 137439364431L) != 0)) {
				{
				State = 1110;
				statement_list();
				}
			}

			State = 1113;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_local_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			local_variable_type();
			State = 1116;
			local_variable_declarator();
			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1117;
				Match(COMMA);
				State = 1118;
				local_variable_declarator();
				State = 1119;
				if (!( this.IsLocalVariableDeclaration() )) throw new FailedPredicateException(this, " this.IsLocalVariableDeclaration() ");
				}
				}
				State = 1125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 148, RULE_local_variable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 150, RULE_local_variable_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			identifier();
			State = 1131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1129;
				Match(ASSIGNMENT);
				State = 1130;
				local_variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 152, RULE_local_variable_initializer);
		try {
			State = 1135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1133;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1134;
				array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(UpsilonParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(Context, State);
		EnterRule(_localctx, 154, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			Match(CONSTANT);
			State = 1138;
			type_();
			State = 1139;
			constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 156, RULE_if_body);
		try {
			State = 1143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1141;
				block();
				}
				break;
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case IF:
			case SWITCH:
			case DEFAULT:
			case FOR:
			case WHILE:
			case DO:
			case STOP:
			case START:
			case SKIP_:
			case TRY:
			case THROW:
			case RETURN:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1142;
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 158, RULE_switch_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1145;
					switch_label();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1150;
			statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(UpsilonParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_guardContext case_guard() {
			return GetRuleContext<Case_guardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(UpsilonParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 160, RULE_switch_label);
		int _la;
		try {
			State = 1161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1152;
				Match(CASE);
				State = 1153;
				expression();
				State = 1155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 1154;
					case_guard();
					}
				}

				State = 1157;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1159;
				Match(DEFAULT);
				State = 1160;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_guardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Case_guardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterCase_guard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitCase_guard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_guard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_guardContext case_guard() {
		Case_guardContext _localctx = new Case_guardContext(Context, State);
		EnterRule(_localctx, 162, RULE_case_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 164, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1165;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 166, RULE_for_initializer);
		int _la;
		try {
			State = 1179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1170;
				local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1171;
				expression();
				State = 1176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1172;
					Match(COMMA);
					State = 1173;
					expression();
					}
					}
					State = 1178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 168, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			expression();
			State = 1186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1182;
				Match(COMMA);
				State = 1183;
				expression();
				}
				}
				State = 1188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 170, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 1200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1189;
				specific_catch_clause();
				State = 1193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1190;
						specific_catch_clause();
						}
						} 
					}
					State = 1195;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				}
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1196;
					general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1199;
				general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(UpsilonParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			Match(CATCH);
			State = 1203;
			Match(OPEN_PARENS);
			State = 1204;
			class_type();
			State = 1206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 1205;
				identifier();
				}
			}

			State = 1208;
			Match(CLOSE_PARENS);
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1209;
				exception_filter();
				}
			}

			State = 1212;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(UpsilonParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 174, RULE_general_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			Match(CATCH);
			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1215;
				exception_filter();
				}
			}

			State = 1218;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_filterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		public Exception_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterException_filter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitException_filter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_filter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_filterContext exception_filter() {
		Exception_filterContext _localctx = new Exception_filterContext(Context, State);
		EnterRule(_localctx, 176, RULE_exception_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			Match(OPEN_PARENS);
			State = 1221;
			expression();
			State = 1222;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(UpsilonParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 178, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224;
			Match(DIRECTORY);
			State = 1225;
			_localctx.qi = qualified_identifier();
			State = 1226;
			namespace_body();
			State = 1228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1227;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(UpsilonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(UpsilonParser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 180, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230;
			identifier();
			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1231;
				Match(DOT);
				State = 1232;
				identifier();
				}
				}
				State = 1237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 182, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238;
			Match(OPEN_BRACE);
			State = 1240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 1239;
				extern_alias_directives();
				}
			}

			State = 1243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPORT) {
				{
				State = 1242;
				using_directives();
				}
			}

			State = 1246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305878195706527744L) != 0)) {
				{
				State = 1245;
				namespace_member_declarations();
				}
			}

			State = 1248;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(Context, State);
		EnterRule(_localctx, 184, RULE_extern_alias_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1250;
				extern_alias_directive();
				}
				}
				State = 1253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SKIP_ || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(Context, State);
		EnterRule(_localctx, 186, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			identifier();
			State = 1256;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(Context, State);
		EnterRule(_localctx, 188, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1258;
				using_directive();
				}
				}
				State = 1261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IMPORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
	 
		public Using_directiveContext() { }
		public virtual void CopyFrom(Using_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingAliasDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(UpsilonParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public UsingAliasDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterUsingAliasDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitUsingAliasDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingAliasDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(UpsilonParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public UsingNamespaceDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStaticDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(UpsilonParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(UpsilonParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public UsingStaticDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterUsingStaticDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitUsingStaticDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStaticDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 190, RULE_using_directive);
		try {
			State = 1278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				_localctx = new UsingAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1263;
				Match(IMPORT);
				State = 1264;
				identifier();
				State = 1265;
				Match(ASSIGNMENT);
				State = 1266;
				namespace_or_type_name();
				State = 1267;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new UsingNamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1269;
				Match(IMPORT);
				State = 1270;
				namespace_or_type_name();
				State = 1271;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new UsingStaticDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1273;
				Match(IMPORT);
				State = 1274;
				Match(STATIC);
				State = 1275;
				namespace_or_type_name();
				State = 1276;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 192, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1280;
				namespace_member_declaration();
				}
				}
				State = 1283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2305878195706527744L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 194, RULE_namespace_member_declaration);
		try {
			State = 1287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECTORY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1285;
				namespace_declaration();
				}
				break;
			case NEW:
			case CLASS:
			case ENUM:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case OVERRIDE:
			case FUNCTION:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1286;
				type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1289;
				attributes();
				}
			}

			State = 1293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1577582592L) != 0)) {
				{
				State = 1292;
				all_member_modifiers();
				}
			}

			State = 1298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 1295;
				class_definition();
				}
				break;
			case ENUM:
				{
				State = 1296;
				enum_definition();
				}
				break;
			case FUNCTION:
				{
				State = 1297;
				function_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(UpsilonParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(Context, State);
		EnterRule(_localctx, 198, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1300;
			identifier();
			State = 1301;
			Match(DOUBLE_COLON);
			State = 1302;
			identifier();
			State = 1304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1303;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UpsilonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 200, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306;
			Match(LT);
			State = 1307;
			type_parameter();
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1308;
				Match(COMMA);
				State = 1309;
				type_parameter();
				}
				}
				State = 1314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1315;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 202, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1317;
				attributes();
				}
			}

			State = 1320;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 204, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322;
			Match(COLON);
			State = 1323;
			class_type();
			State = 1328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1324;
				Match(COMMA);
				State = 1325;
				namespace_or_type_name();
				}
				}
				State = 1330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(Context, State);
		EnterRule(_localctx, 206, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331;
			namespace_or_type_name();
			State = 1336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1332;
				Match(COMMA);
				State = 1333;
				namespace_or_type_name();
				}
				}
				State = 1338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(Context, State);
		EnterRule(_localctx, 208, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1339;
				type_parameter_constraints_clause();
				}
				}
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SKIP_ || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344;
			identifier();
			State = 1345;
			Match(COLON);
			State = 1346;
			type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(Context, State);
		EnterRule(_localctx, 212, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 1358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1348;
				constructor_constraint();
				}
				break;
			case STRING:
			case VALUE:
			case CLASS:
			case SKIP_:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1349;
				primary_constraint();
				State = 1352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
				case 1:
					{
					State = 1350;
					Match(COMMA);
					State = 1351;
					secondary_constraints();
					}
					break;
				}
				State = 1356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1354;
					Match(COMMA);
					State = 1355;
					constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(UpsilonParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(UpsilonParser.INTERR, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(Context, State);
		EnterRule(_localctx, 214, RULE_primary_constraint);
		int _la;
		try {
			State = 1365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case VALUE:
			case SKIP_:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360;
				class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1361;
				Match(CLASS);
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERR) {
					{
					State = 1362;
					Match(INTERR);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(Context, State);
		EnterRule(_localctx, 216, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			namespace_or_type_name();
			State = 1372;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1368;
					Match(COMMA);
					State = 1369;
					namespace_or_type_name();
					}
					} 
				}
				State = 1374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(UpsilonParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(Context, State);
		EnterRule(_localctx, 218, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			Match(NEW);
			State = 1376;
			Match(OPEN_PARENS);
			State = 1377;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 220, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			Match(OPEN_BRACE);
			State = 1381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6917210167684039168L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 2177L) != 0)) {
				{
				State = 1380;
				class_member_declarations();
				}
			}

			State = 1383;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 222, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1385;
				class_member_declaration();
				}
				}
				State = 1388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -6917210167684039168L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 2177L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructor_definitionContext destructor_definition() {
			return GetRuleContext<Destructor_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_class_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1390;
				attributes();
				}
				break;
			}
			State = 1394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1577582592L) != 0)) {
				{
				State = 1393;
				all_member_modifiers();
				}
			}

			State = 1398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case VOID:
			case CONSTANT:
			case CLASS:
			case ENUM:
			case SKIP_:
			case FUNCTION:
			case IDENTIFIER:
			case OPEN_BRACKET:
			case OPEN_PARENS:
			case STAR:
			case INTERR:
				{
				State = 1396;
				common_member_declaration();
				}
				break;
			case TILDE:
				{
				State = 1397;
				destructor_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 226, RULE_all_member_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1400;
				all_member_modifier();
				}
				}
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1577582592L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(UpsilonParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(UpsilonParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(UpsilonParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(UpsilonParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(UpsilonParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(UpsilonParser.STATIC, 0); }
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 228, RULE_all_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1577582592L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(UpsilonParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 230, RULE_common_member_declaration);
		try {
			State = 1415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1407;
				constant_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1408;
				typed_member_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1409;
				constructor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1410;
				Match(VOID);
				State = 1411;
				method_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1412;
				class_definition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1413;
				enum_definition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1414;
				function_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(UpsilonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 232, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417;
			type_();
			State = 1423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1418;
				namespace_or_type_name();
				State = 1419;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 1421;
				method_declaration();
				}
				break;
			case 3:
				{
				State = 1422;
				field_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(Context, State);
		EnterRule(_localctx, 234, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			constant_declarator();
			State = 1430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1426;
				Match(COMMA);
				State = 1427;
				constant_declarator();
				}
				}
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(Context, State);
		EnterRule(_localctx, 236, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			identifier();
			State = 1434;
			Match(ASSIGNMENT);
			State = 1435;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 238, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437;
			variable_declarator();
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1438;
				Match(COMMA);
				State = 1439;
				variable_declarator();
				}
				}
				State = 1444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 240, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			identifier();
			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1446;
				Match(ASSIGNMENT);
				State = 1447;
				variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 242, RULE_variable_initializer);
		try {
			State = 1452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1450;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1451;
				array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(UpsilonParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 244, RULE_return_type);
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1454;
				type_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1455;
				Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 246, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 248, RULE_method_body);
		try {
			State = 1462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1460;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1461;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(UpsilonParser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 250, RULE_formal_parameter_list);
		int _la;
		try {
			State = 1470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1464;
				parameter_array();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1465;
				fixed_parameters();
				State = 1468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1466;
					Match(COMMA);
					State = 1467;
					parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 252, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1472;
			fixed_parameter();
			State = 1477;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1473;
					Match(COMMA);
					State = 1474;
					fixed_parameter();
					}
					} 
				}
				State = 1479;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 254, RULE_fixed_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1480;
				attributes();
				}
				break;
			}
			State = 1484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THIS) {
				{
				State = 1483;
				parameter_modifier();
				}
			}

			State = 1486;
			arg_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(UpsilonParser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 256, RULE_parameter_modifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(Context, State);
		EnterRule(_localctx, 258, RULE_parameter_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1490;
				attributes();
				}
				break;
			}
			State = 1493;
			array_type();
			State = 1494;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(UpsilonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(UpsilonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(UpsilonParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(UpsilonParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(UpsilonParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(UpsilonParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(UpsilonParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(UpsilonParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(UpsilonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(UpsilonParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(UpsilonParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(UpsilonParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(UpsilonParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(UpsilonParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(UpsilonParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(UpsilonParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(UpsilonParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UpsilonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(UpsilonParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(UpsilonParser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(Context, State);
		EnterRule(_localctx, 260, RULE_overloadable_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 8621595647L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(UpsilonParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(UpsilonParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 262, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			Match(COLON);
			State = 1499;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1500;
			Match(OPEN_PARENS);
			State = 1502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6341206779433583104L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719682215L) != 0)) {
				{
				State = 1501;
				argument_list();
				}
			}

			State = 1504;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 264, RULE_body);
		try {
			State = 1508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1506;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1507;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(UpsilonParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(UpsilonParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(UpsilonParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(UpsilonParser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 266, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1510;
			base_type();
			State = 1518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 1511;
					_la = TokenStream.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 1516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1517;
				rank_specifier();
				}
				}
				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 2098177L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 268, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			Match(OPEN_BRACKET);
			State = 1526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1523;
				Match(COMMA);
				}
				}
				State = 1528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1529;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 270, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			Match(OPEN_BRACE);
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8070589036343886336L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
				{
				State = 1532;
				variable_initializer();
				State = 1537;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1533;
						Match(COMMA);
						State = 1534;
						variable_initializer();
						}
						} 
					}
					State = 1539;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				}
				State = 1541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1540;
					Match(COMMA);
					}
				}

				}
			}

			State = 1545;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(UpsilonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameterContext[] variant_type_parameter() {
			return GetRuleContexts<Variant_type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameterContext variant_type_parameter(int i) {
			return GetRuleContext<Variant_type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 272, RULE_variant_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547;
			Match(LT);
			State = 1548;
			variant_type_parameter();
			State = 1553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1549;
				Match(COMMA);
				State = 1550;
				variant_type_parameter();
				}
				}
				State = 1555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1556;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Variant_type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameterContext variant_type_parameter() {
		Variant_type_parameterContext _localctx = new Variant_type_parameterContext(Context, State);
		EnterRule(_localctx, 274, RULE_variant_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1558;
				attributes();
				}
			}

			State = 1561;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(Context, State);
		EnterRule(_localctx, 276, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563;
			Match(COLON);
			State = 1564;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(UpsilonParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(UpsilonParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 278, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1566;
			Match(OPEN_BRACE);
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2306126683213660160L) != 0)) {
				{
				State = 1567;
				enum_member_declaration();
				State = 1572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1568;
						Match(COMMA);
						State = 1569;
						enum_member_declaration();
						}
						} 
					}
					State = 1574;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
				}
				State = 1576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1575;
					Match(COMMA);
					}
				}

				}
			}

			State = 1580;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 280, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1582;
				attributes();
				}
			}

			State = 1585;
			identifier();
			State = 1588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1586;
				Match(ASSIGNMENT);
				State = 1587;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(UpsilonParser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(Context, State);
		EnterRule(_localctx, 282, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590;
			Match(OPEN_BRACKET);
			State = 1591;
			global_attribute_target();
			State = 1592;
			Match(COLON);
			State = 1593;
			attribute_list();
			State = 1595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1594;
				Match(COMMA);
				}
			}

			State = 1597;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(Context, State);
		EnterRule(_localctx, 284, RULE_global_attribute_target);
		try {
			State = 1601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case STRING:
			case VALUE:
			case VOID:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case CONSTANT:
			case CLASS:
			case ENUM:
			case BASE:
			case IMPORT:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case DIRECTORY:
			case OVERRIDE:
			case IF:
			case ELSE:
			case SWITCH:
			case CASE:
			case DEFAULT:
			case FOR:
			case WHILE:
			case DO:
			case STOP:
			case START:
			case TRY:
			case CATCH:
			case THROW:
			case FUNCTION:
			case RETURN:
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1599;
				keyword();
				}
				break;
			case SKIP_:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1600;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 286, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1603;
					attribute_section();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,198,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(UpsilonParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(UpsilonParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(UpsilonParser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(Context, State);
		EnterRule(_localctx, 288, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608;
			Match(OPEN_BRACKET);
			State = 1612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1609;
				attribute_target();
				State = 1610;
				Match(COLON);
				}
				break;
			}
			State = 1614;
			attribute_list();
			State = 1616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1615;
				Match(COMMA);
				}
			}

			State = 1618;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(Context, State);
		EnterRule(_localctx, 290, RULE_attribute_target);
		try {
			State = 1622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case STRING:
			case VALUE:
			case VOID:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case CONSTANT:
			case CLASS:
			case ENUM:
			case BASE:
			case IMPORT:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case DIRECTORY:
			case OVERRIDE:
			case IF:
			case ELSE:
			case SWITCH:
			case CASE:
			case DEFAULT:
			case FOR:
			case WHILE:
			case DO:
			case STOP:
			case START:
			case TRY:
			case CATCH:
			case THROW:
			case FUNCTION:
			case RETURN:
			case THIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1620;
				keyword();
				}
				break;
			case SKIP_:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1621;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 292, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			attribute();
			State = 1629;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1625;
					Match(COMMA);
					State = 1626;
					attribute();
					}
					} 
				}
				State = 1631;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,202,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argumentContext[] attribute_argument() {
			return GetRuleContexts<Attribute_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argumentContext attribute_argument(int i) {
			return GetRuleContext<Attribute_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 294, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			namespace_or_type_name();
			State = 1645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1633;
				Match(OPEN_PARENS);
				State = 1642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719674023L) != 0)) {
					{
					State = 1634;
					attribute_argument();
					State = 1639;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1635;
						Match(COMMA);
						State = 1636;
						attribute_argument();
						}
						}
						State = 1641;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1644;
				Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		public Attribute_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterAttribute_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitAttribute_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentContext attribute_argument() {
		Attribute_argumentContext _localctx = new Attribute_argumentContext(Context, State);
		EnterRule(_localctx, 296, RULE_attribute_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				State = 1647;
				identifier();
				State = 1648;
				Match(COLON);
				}
				break;
			}
			State = 1652;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 298, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654;
			_localctx.first = Match(ASSIGNMENT);
			State = 1655;
			_localctx.second = Match(GT);
			State = 1656;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(UpsilonParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(UpsilonParser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 300, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1658;
			_localctx.first = Match(GT);
			State = 1659;
			_localctx.second = Match(GT);
			State = 1660;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(UpsilonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(UpsilonParser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 302, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662;
			_localctx.first = Match(GT);
			State = 1663;
			_localctx.second = Match(OP_GE);
			State = 1664;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(UpsilonParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(UpsilonParser.HEX_INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(UpsilonParser.BIN_INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(UpsilonParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(UpsilonParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(UpsilonParser.NULL_, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 304, RULE_literal);
		try {
			State = 1674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1666;
				boolean_literal();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667;
				string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1668;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1669;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1670;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1671;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1672;
				Match(CHARACTER_LITERAL);
				}
				break;
			case NULL_:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1673;
				Match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(UpsilonParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(UpsilonParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 306, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_stringContext interpolated_regular_string() {
			return GetRuleContext<Interpolated_regular_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
			return GetRuleContext<Interpolated_verbatium_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(UpsilonParser.REGULAR_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(UpsilonParser.VERBATIUM_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 308, RULE_string_literal);
		try {
			State = 1682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1678;
				interpolated_regular_string();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1679;
				interpolated_verbatium_string();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1680;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1681;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(UpsilonParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(UpsilonParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_string_partContext[] interpolated_regular_string_part() {
			return GetRuleContexts<Interpolated_regular_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_string_partContext interpolated_regular_string_part(int i) {
			return GetRuleContext<Interpolated_regular_string_partContext>(i);
		}
		public Interpolated_regular_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_stringContext interpolated_regular_string() {
		Interpolated_regular_stringContext _localctx = new Interpolated_regular_stringContext(Context, State);
		EnterRule(_localctx, 310, RULE_interpolated_regular_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684;
			Match(INTERPOLATED_REGULAR_STRING_START);
			State = 1688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 5153960952487L) != 0)) {
				{
				{
				State = 1685;
				interpolated_regular_string_part();
				}
				}
				State = 1690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1691;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(UpsilonParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(UpsilonParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_string_partContext[] interpolated_verbatium_string_part() {
			return GetRuleContexts<Interpolated_verbatium_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part(int i) {
			return GetRuleContext<Interpolated_verbatium_string_partContext>(i);
		}
		public Interpolated_verbatium_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
		Interpolated_verbatium_stringContext _localctx = new Interpolated_verbatium_stringContext(Context, State);
		EnterRule(_localctx, 312, RULE_interpolated_verbatium_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1693;
			Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 1697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8647049788647309824L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 10101763277479L) != 0)) {
				{
				{
				State = 1694;
				interpolated_verbatium_string_part();
				}
				}
				State = 1699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1700;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(UpsilonParser.DOUBLE_CURLY_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(UpsilonParser.REGULAR_CHAR_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(UpsilonParser.REGULAR_STRING_INSIDE, 0); }
		public Interpolated_regular_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_string_partContext interpolated_regular_string_part() {
		Interpolated_regular_string_partContext _localctx = new Interpolated_regular_string_partContext(Context, State);
		EnterRule(_localctx, 314, RULE_interpolated_regular_string_part);
		try {
			State = 1706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1702;
				interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1703;
				Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1704;
				Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1705;
				Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(UpsilonParser.DOUBLE_CURLY_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(UpsilonParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(UpsilonParser.VERBATIUM_INSIDE_STRING, 0); }
		public Interpolated_verbatium_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part() {
		Interpolated_verbatium_string_partContext _localctx = new Interpolated_verbatium_string_partContext(Context, State);
		EnterRule(_localctx, 316, RULE_interpolated_verbatium_string_part);
		try {
			State = 1712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case CHAR:
			case INT:
			case NUM:
			case STRING:
			case VALUE:
			case FALSE:
			case TRUE:
			case NULL_:
			case NEW:
			case BASE:
			case DEFAULT:
			case SKIP_:
			case THIS:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1708;
				interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1709;
				Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1710;
				Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1711;
				Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_string_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(UpsilonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(UpsilonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(UpsilonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORMAT_STRING() { return GetTokens(UpsilonParser.FORMAT_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(UpsilonParser.FORMAT_STRING, i);
		}
		public Interpolated_string_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_string_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_string_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_string_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_string_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_string_expressionContext interpolated_string_expression() {
		Interpolated_string_expressionContext _localctx = new Interpolated_string_expressionContext(Context, State);
		EnterRule(_localctx, 318, RULE_interpolated_string_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714;
			expression();
			State = 1719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1715;
				Match(COMMA);
				State = 1716;
				expression();
				}
				}
				State = 1721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1722;
				Match(COLON);
				State = 1724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1723;
					Match(FORMAT_STRING);
					}
					}
					State = 1726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(UpsilonParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(UpsilonParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(UpsilonParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(UpsilonParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(UpsilonParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(UpsilonParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(UpsilonParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(UpsilonParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(UpsilonParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(UpsilonParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(UpsilonParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(UpsilonParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(UpsilonParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(UpsilonParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(UpsilonParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(UpsilonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(UpsilonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UpsilonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(UpsilonParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(UpsilonParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(UpsilonParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(UpsilonParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(UpsilonParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(UpsilonParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(UpsilonParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(UpsilonParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(UpsilonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(UpsilonParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(UpsilonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(UpsilonParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(UpsilonParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(UpsilonParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(UpsilonParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(UpsilonParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(UpsilonParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(UpsilonParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(UpsilonParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 320, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1730;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 279275953450496L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(UpsilonParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 322, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1732;
			Match(CLASS);
			State = 1733;
			identifier();
			State = 1735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1734;
				type_parameter_list();
				}
			}

			State = 1738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1737;
				class_base();
				}
			}

			State = 1741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 1740;
				type_parameter_constraints_clauses();
				}
			}

			State = 1743;
			class_body();
			State = 1745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1744;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(UpsilonParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 324, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747;
			Match(ENUM);
			State = 1748;
			identifier();
			State = 1750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1749;
				enum_base();
				}
			}

			State = 1752;
			enum_body();
			State = 1754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1753;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(UpsilonParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 326, RULE_function_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			Match(FUNCTION);
			State = 1757;
			return_type();
			State = 1758;
			identifier();
			State = 1760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1759;
				variant_type_parameter_list();
				}
			}

			State = 1762;
			Match(OPEN_PARENS);
			State = 1764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6917104616152695296L) != 0) || _la==STAR || _la==INTERR) {
				{
				State = 1763;
				formal_parameter_list();
				}
			}

			State = 1766;
			Match(CLOSE_PARENS);
			State = 1768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 1767;
				type_parameter_constraints_clauses();
				}
			}

			State = 1770;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 328, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772;
			variable_declarators();
			State = 1773;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(UpsilonParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 330, RULE_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			Match(CONSTANT);
			State = 1776;
			type_();
			State = 1777;
			constant_declarators();
			State = 1778;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(UpsilonParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(Context, State);
		EnterRule(_localctx, 332, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			Match(TILDE);
			State = 1781;
			identifier();
			State = 1782;
			Match(OPEN_PARENS);
			State = 1783;
			Match(CLOSE_PARENS);
			State = 1784;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 334, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			identifier();
			State = 1787;
			Match(OPEN_PARENS);
			State = 1789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6917104616152695296L) != 0) || _la==STAR || _la==INTERR) {
				{
				State = 1788;
				formal_parameter_list();
				}
			}

			State = 1791;
			Match(CLOSE_PARENS);
			State = 1793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1792;
				constructor_initializer();
				}
			}

			State = 1795;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(UpsilonParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 336, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797;
			method_member_name();
			State = 1799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1798;
				type_parameter_list();
				}
			}

			State = 1801;
			Match(OPEN_PARENS);
			State = 1803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6917104616152695296L) != 0) || _la==STAR || _la==INTERR) {
				{
				State = 1802;
				formal_parameter_list();
				}
			}

			State = 1805;
			Match(CLOSE_PARENS);
			State = 1807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_ || _la==IDENTIFIER) {
				{
				State = 1806;
				type_parameter_constraints_clauses();
				}
			}

			State = 1814;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 1809;
				method_body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 1810;
				right_arrow();
				State = 1811;
				throwable_expression();
				State = 1812;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(UpsilonParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(UpsilonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(UpsilonParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 338, RULE_method_member_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				{
				State = 1816;
				identifier();
				}
				break;
			case 2:
				{
				State = 1817;
				identifier();
				State = 1818;
				Match(DOUBLE_COLON);
				State = 1819;
				identifier();
				}
				break;
			}
			State = 1830;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1824;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1823;
						type_argument_list();
						}
					}

					State = 1826;
					Match(DOT);
					State = 1827;
					identifier();
					}
					} 
				}
				State = 1832;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(UpsilonParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(Context, State);
		EnterRule(_localctx, 340, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833;
			type_();
			State = 1834;
			identifier();
			State = 1837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1835;
				Match(ASSIGNMENT);
				State = 1836;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 342, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839;
			Match(OPEN_PARENS);
			State = 1841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6341206779433583104L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719682215L) != 0)) {
				{
				State = 1840;
				argument_list();
				}
			}

			State = 1843;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(UpsilonParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(UpsilonParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 344, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			Match(OPEN_PARENS);
			State = 1847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6341206779433583104L) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 68719682215L) != 0)) {
				{
				State = 1846;
				argument_list();
				}
			}

			State = 1849;
			Match(CLOSE_PARENS);
			State = 1851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 1850;
				object_or_collection_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(UpsilonParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(UpsilonParser.SKIP_, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUpsilonParserListener typedListener = listener as IUpsilonParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUpsilonParserVisitor<TResult> typedVisitor = visitor as IUpsilonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 346, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853;
			_la = TokenStream.LA(1);
			if ( !(_la==SKIP_ || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 73: return local_variable_declaration_sempred((Local_variable_declarationContext)_localctx, predIndex);
		case 149: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 150: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 151: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool local_variable_declaration_sempred(Local_variable_declarationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  this.IsLocalVariableDeclaration() ;
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,132,1856,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,1,0,3,0,350,8,0,1,0,3,0,353,8,0,1,
		0,3,0,356,8,0,1,0,5,0,359,8,0,10,0,12,0,362,9,0,1,0,3,0,365,8,0,1,0,1,
		0,1,1,1,1,3,1,371,8,1,1,1,3,1,374,8,1,1,1,1,1,1,1,3,1,379,8,1,5,1,381,
		8,1,10,1,12,1,384,9,1,1,2,1,2,1,2,1,2,5,2,390,8,2,10,2,12,2,393,9,2,1,
		3,1,3,1,3,1,3,1,3,3,3,400,8,3,1,4,1,4,1,4,1,4,4,4,406,8,4,11,4,12,4,407,
		1,4,1,4,1,5,1,5,3,5,414,8,5,1,6,1,6,3,6,418,8,6,1,7,1,7,3,7,422,8,7,1,
		8,1,8,1,8,3,8,427,8,8,1,9,1,9,1,9,3,9,432,8,9,1,10,1,10,1,10,1,10,5,10,
		438,8,10,10,10,12,10,441,9,10,1,10,1,10,1,11,1,11,1,11,5,11,448,8,11,10,
		11,12,11,451,9,11,1,12,1,12,1,12,3,12,456,8,12,1,12,1,12,1,12,1,12,3,12,
		462,8,12,1,13,1,13,3,13,466,8,13,1,14,1,14,3,14,470,8,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,3,15,480,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,3,16,493,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
		501,8,17,1,18,1,18,1,18,1,18,3,18,507,8,18,3,18,509,8,18,1,19,1,19,1,19,
		5,19,514,8,19,10,19,12,19,517,9,19,1,20,1,20,1,20,5,20,522,8,20,10,20,
		12,20,525,9,20,1,21,1,21,1,21,5,21,530,8,21,10,21,12,21,533,9,21,1,22,
		1,22,1,22,5,22,538,8,22,10,22,12,22,541,9,22,1,23,1,23,1,23,5,23,546,8,
		23,10,23,12,23,549,9,23,1,24,1,24,1,24,5,24,554,8,24,10,24,12,24,557,9,
		24,1,25,1,25,1,25,5,25,562,8,25,10,25,12,25,565,9,25,1,26,1,26,1,26,3,
		26,570,8,26,1,26,5,26,573,8,26,10,26,12,26,576,9,26,1,27,1,27,1,27,5,27,
		581,8,27,10,27,12,27,584,9,27,1,28,1,28,1,28,5,28,589,8,28,10,28,12,28,
		592,9,28,1,29,1,29,1,29,1,29,1,29,3,29,599,8,29,3,29,601,8,29,1,29,3,29,
		604,8,29,1,30,1,30,1,30,5,30,609,8,30,10,30,12,30,612,9,30,1,31,1,31,3,
		31,616,8,31,1,31,1,31,1,31,1,32,1,32,3,32,623,8,32,1,32,1,32,3,32,627,
		8,32,3,32,629,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,649,8,33,1,34,1,34,1,34,1,34,
		1,34,1,35,1,35,3,35,658,8,35,1,35,5,35,661,8,35,10,35,12,35,664,9,35,1,
		35,3,35,667,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,675,8,35,1,35,3,35,
		678,8,35,1,35,5,35,681,8,35,10,35,12,35,684,9,35,1,35,3,35,687,8,35,5,
		35,689,8,35,10,35,12,35,692,9,35,1,36,1,36,1,36,3,36,697,8,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,711,8,36,1,36,1,
		36,1,36,1,36,3,36,717,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,
		727,8,36,10,36,12,36,730,9,36,1,36,3,36,733,8,36,1,36,4,36,736,8,36,11,
		36,12,36,737,1,36,1,36,3,36,742,8,36,1,36,1,36,1,36,1,36,3,36,748,8,36,
		1,36,1,36,1,36,1,36,4,36,754,8,36,11,36,12,36,755,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,3,36,765,8,36,3,36,767,8,36,1,37,1,37,3,37,771,8,37,1,38,
		1,38,1,38,1,39,3,39,777,8,39,1,39,1,39,1,39,3,39,782,8,39,1,40,3,40,785,
		8,40,1,40,1,40,1,40,1,40,5,40,791,8,40,10,40,12,40,794,9,40,1,40,1,40,
		1,41,1,41,1,41,3,41,801,8,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,5,43,810,
		8,43,10,43,12,43,813,9,43,1,44,1,44,3,44,817,8,44,1,45,1,45,1,45,3,45,
		822,8,45,3,45,824,8,45,1,45,1,45,1,46,1,46,1,46,5,46,831,8,46,10,46,12,
		46,834,9,46,1,47,1,47,1,47,1,47,1,47,3,47,841,8,47,1,47,1,47,1,47,1,48,
		1,48,3,48,848,8,48,1,49,1,49,1,49,1,49,5,49,854,8,49,10,49,12,49,857,9,
		49,1,49,3,49,860,8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,3,50,869,8,50,
		1,51,1,51,1,51,3,51,874,8,51,3,51,876,8,51,1,51,1,51,1,52,1,52,1,52,5,
		52,883,8,52,10,52,12,52,886,9,52,1,53,1,53,1,53,1,53,1,53,3,53,893,8,53,
		1,54,1,54,3,54,897,8,54,1,54,1,54,1,54,3,54,902,8,54,3,54,904,8,54,1,54,
		1,54,1,54,3,54,909,8,54,5,54,911,8,54,10,54,12,54,914,9,54,1,55,1,55,5,
		55,918,8,55,10,55,12,55,921,9,55,1,55,1,55,1,56,1,56,1,56,5,56,928,8,56,
		10,56,12,56,931,9,56,1,56,3,56,934,8,56,1,56,3,56,937,8,56,1,56,3,56,940,
		8,56,1,57,1,57,1,57,1,57,5,57,946,8,57,10,57,12,57,949,9,57,1,57,1,57,
		1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,1,60,1,60,3,60,972,8,60,1,61,1,61,1,61,5,61,977,8,61,10,
		61,12,61,980,9,61,1,62,1,62,1,62,1,63,1,63,1,63,5,63,988,8,63,10,63,12,
		63,991,9,63,1,64,1,64,3,64,995,8,64,1,65,1,65,1,65,3,65,1000,8,65,1,66,
		1,66,1,66,1,66,1,66,1,66,3,66,1008,8,66,1,67,3,67,1011,8,67,1,68,1,68,
		1,68,1,68,1,68,3,68,1018,8,68,1,69,1,69,1,69,1,69,1,70,1,70,3,70,1026,
		8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1039,
		8,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1047,8,71,10,71,12,71,1050,9,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,3,71,1071,8,71,1,71,1,71,3,71,1075,8,71,1,71,
		1,71,3,71,1079,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1089,
		8,71,1,71,1,71,1,71,3,71,1094,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,3,71,1105,8,71,1,71,3,71,1108,8,71,1,72,1,72,3,72,1112,8,72,
		1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,5,73,1122,8,73,10,73,12,73,1125,
		9,73,1,74,1,74,1,75,1,75,1,75,3,75,1132,8,75,1,76,1,76,3,76,1136,8,76,
		1,77,1,77,1,77,1,77,1,78,1,78,3,78,1144,8,78,1,79,4,79,1147,8,79,11,79,
		12,79,1148,1,79,1,79,1,80,1,80,1,80,3,80,1156,8,80,1,80,1,80,1,80,1,80,
		3,80,1162,8,80,1,81,1,81,1,82,4,82,1167,8,82,11,82,12,82,1168,1,83,1,83,
		1,83,1,83,5,83,1175,8,83,10,83,12,83,1178,9,83,3,83,1180,8,83,1,84,1,84,
		1,84,5,84,1185,8,84,10,84,12,84,1188,9,84,1,85,1,85,5,85,1192,8,85,10,
		85,12,85,1195,9,85,1,85,3,85,1198,8,85,1,85,3,85,1201,8,85,1,86,1,86,1,
		86,1,86,3,86,1207,8,86,1,86,1,86,3,86,1211,8,86,1,86,1,86,1,87,1,87,3,
		87,1217,8,87,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,1229,
		8,89,1,90,1,90,1,90,5,90,1234,8,90,10,90,12,90,1237,9,90,1,91,1,91,3,91,
		1241,8,91,1,91,3,91,1244,8,91,1,91,3,91,1247,8,91,1,91,1,91,1,92,4,92,
		1252,8,92,11,92,12,92,1253,1,93,1,93,1,93,1,94,4,94,1260,8,94,11,94,12,
		94,1261,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
		95,1,95,1,95,3,95,1279,8,95,1,96,4,96,1282,8,96,11,96,12,96,1283,1,97,
		1,97,3,97,1288,8,97,1,98,3,98,1291,8,98,1,98,3,98,1294,8,98,1,98,1,98,
		1,98,3,98,1299,8,98,1,99,1,99,1,99,1,99,3,99,1305,8,99,1,100,1,100,1,100,
		1,100,5,100,1311,8,100,10,100,12,100,1314,9,100,1,100,1,100,1,101,3,101,
		1319,8,101,1,101,1,101,1,102,1,102,1,102,1,102,5,102,1327,8,102,10,102,
		12,102,1330,9,102,1,103,1,103,1,103,5,103,1335,8,103,10,103,12,103,1338,
		9,103,1,104,4,104,1341,8,104,11,104,12,104,1342,1,105,1,105,1,105,1,105,
		1,106,1,106,1,106,1,106,3,106,1353,8,106,1,106,1,106,3,106,1357,8,106,
		3,106,1359,8,106,1,107,1,107,1,107,3,107,1364,8,107,3,107,1366,8,107,1,
		108,1,108,1,108,5,108,1371,8,108,10,108,12,108,1374,9,108,1,109,1,109,
		1,109,1,109,1,110,1,110,3,110,1382,8,110,1,110,1,110,1,111,4,111,1387,
		8,111,11,111,12,111,1388,1,112,3,112,1392,8,112,1,112,3,112,1395,8,112,
		1,112,1,112,3,112,1399,8,112,1,113,4,113,1402,8,113,11,113,12,113,1403,
		1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1416,
		8,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1424,8,116,1,117,1,117,
		1,117,5,117,1429,8,117,10,117,12,117,1432,9,117,1,118,1,118,1,118,1,118,
		1,119,1,119,1,119,5,119,1441,8,119,10,119,12,119,1444,9,119,1,120,1,120,
		1,120,3,120,1449,8,120,1,121,1,121,3,121,1453,8,121,1,122,1,122,3,122,
		1457,8,122,1,123,1,123,1,124,1,124,3,124,1463,8,124,1,125,1,125,1,125,
		1,125,3,125,1469,8,125,3,125,1471,8,125,1,126,1,126,1,126,5,126,1476,8,
		126,10,126,12,126,1479,9,126,1,127,3,127,1482,8,127,1,127,3,127,1485,8,
		127,1,127,1,127,1,128,1,128,1,129,3,129,1492,8,129,1,129,1,129,1,129,1,
		130,1,130,1,131,1,131,1,131,1,131,3,131,1503,8,131,1,131,1,131,1,132,1,
		132,3,132,1509,8,132,1,133,1,133,5,133,1513,8,133,10,133,12,133,1516,9,
		133,1,133,4,133,1519,8,133,11,133,12,133,1520,1,134,1,134,5,134,1525,8,
		134,10,134,12,134,1528,9,134,1,134,1,134,1,135,1,135,1,135,1,135,5,135,
		1536,8,135,10,135,12,135,1539,9,135,1,135,3,135,1542,8,135,3,135,1544,
		8,135,1,135,1,135,1,136,1,136,1,136,1,136,5,136,1552,8,136,10,136,12,136,
		1555,9,136,1,136,1,136,1,137,3,137,1560,8,137,1,137,1,137,1,138,1,138,
		1,138,1,139,1,139,1,139,1,139,5,139,1571,8,139,10,139,12,139,1574,9,139,
		1,139,3,139,1577,8,139,3,139,1579,8,139,1,139,1,139,1,140,3,140,1584,8,
		140,1,140,1,140,1,140,3,140,1589,8,140,1,141,1,141,1,141,1,141,1,141,3,
		141,1596,8,141,1,141,1,141,1,142,1,142,3,142,1602,8,142,1,143,4,143,1605,
		8,143,11,143,12,143,1606,1,144,1,144,1,144,1,144,3,144,1613,8,144,1,144,
		1,144,3,144,1617,8,144,1,144,1,144,1,145,1,145,3,145,1623,8,145,1,146,
		1,146,1,146,5,146,1628,8,146,10,146,12,146,1631,9,146,1,147,1,147,1,147,
		1,147,1,147,5,147,1638,8,147,10,147,12,147,1641,9,147,3,147,1643,8,147,
		1,147,3,147,1646,8,147,1,148,1,148,1,148,3,148,1651,8,148,1,148,1,148,
		1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,
		1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1675,8,152,1,153,
		1,153,1,154,1,154,1,154,1,154,3,154,1683,8,154,1,155,1,155,5,155,1687,
		8,155,10,155,12,155,1690,9,155,1,155,1,155,1,156,1,156,5,156,1696,8,156,
		10,156,12,156,1699,9,156,1,156,1,156,1,157,1,157,1,157,1,157,3,157,1707,
		8,157,1,158,1,158,1,158,1,158,3,158,1713,8,158,1,159,1,159,1,159,5,159,
		1718,8,159,10,159,12,159,1721,9,159,1,159,1,159,4,159,1725,8,159,11,159,
		12,159,1726,3,159,1729,8,159,1,160,1,160,1,161,1,161,1,161,3,161,1736,
		8,161,1,161,3,161,1739,8,161,1,161,3,161,1742,8,161,1,161,1,161,3,161,
		1746,8,161,1,162,1,162,1,162,3,162,1751,8,162,1,162,1,162,3,162,1755,8,
		162,1,163,1,163,1,163,1,163,3,163,1761,8,163,1,163,1,163,3,163,1765,8,
		163,1,163,1,163,3,163,1769,8,163,1,163,1,163,1,164,1,164,1,164,1,165,1,
		165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,167,1,167,
		1,167,3,167,1790,8,167,1,167,1,167,3,167,1794,8,167,1,167,1,167,1,168,
		1,168,3,168,1800,8,168,1,168,1,168,3,168,1804,8,168,1,168,1,168,3,168,
		1808,8,168,1,168,1,168,1,168,1,168,1,168,3,168,1815,8,168,1,169,1,169,
		1,169,1,169,1,169,3,169,1822,8,169,1,169,3,169,1825,8,169,1,169,1,169,
		5,169,1829,8,169,10,169,12,169,1832,9,169,1,170,1,170,1,170,1,170,3,170,
		1838,8,170,1,171,1,171,3,171,1842,8,171,1,171,1,171,1,172,1,172,3,172,
		1848,8,172,1,172,1,172,3,172,1852,8,172,1,173,1,173,1,173,0,0,174,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
		318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,0,12,1,0,90,
		91,2,0,80,81,92,93,1,0,69,70,1,0,71,73,1,0,9,14,3,0,19,19,25,28,30,30,
		6,0,16,17,69,78,80,81,85,86,90,93,102,102,2,0,23,23,47,47,2,0,71,71,82,
		82,1,0,16,17,3,0,9,11,13,40,42,47,2,0,41,41,48,48,1990,0,349,1,0,0,0,2,
		373,1,0,0,0,4,385,1,0,0,0,6,399,1,0,0,0,8,401,1,0,0,0,10,411,1,0,0,0,12,
		417,1,0,0,0,14,421,1,0,0,0,16,426,1,0,0,0,18,431,1,0,0,0,20,433,1,0,0,
		0,22,444,1,0,0,0,24,455,1,0,0,0,26,465,1,0,0,0,28,469,1,0,0,0,30,479,1,
		0,0,0,32,492,1,0,0,0,34,494,1,0,0,0,36,502,1,0,0,0,38,510,1,0,0,0,40,518,
		1,0,0,0,42,526,1,0,0,0,44,534,1,0,0,0,46,542,1,0,0,0,48,550,1,0,0,0,50,
		558,1,0,0,0,52,566,1,0,0,0,54,577,1,0,0,0,56,585,1,0,0,0,58,593,1,0,0,
		0,60,605,1,0,0,0,62,613,1,0,0,0,64,628,1,0,0,0,66,648,1,0,0,0,68,650,1,
		0,0,0,70,655,1,0,0,0,72,766,1,0,0,0,74,770,1,0,0,0,76,772,1,0,0,0,78,776,
		1,0,0,0,80,784,1,0,0,0,82,800,1,0,0,0,84,804,1,0,0,0,86,806,1,0,0,0,88,
		816,1,0,0,0,90,818,1,0,0,0,92,827,1,0,0,0,94,840,1,0,0,0,96,847,1,0,0,
		0,98,849,1,0,0,0,100,868,1,0,0,0,102,870,1,0,0,0,104,879,1,0,0,0,106,892,
		1,0,0,0,108,894,1,0,0,0,110,915,1,0,0,0,112,924,1,0,0,0,114,941,1,0,0,
		0,116,952,1,0,0,0,118,956,1,0,0,0,120,971,1,0,0,0,122,973,1,0,0,0,124,
		981,1,0,0,0,126,984,1,0,0,0,128,994,1,0,0,0,130,999,1,0,0,0,132,1007,1,
		0,0,0,134,1010,1,0,0,0,136,1017,1,0,0,0,138,1019,1,0,0,0,140,1025,1,0,
		0,0,142,1107,1,0,0,0,144,1109,1,0,0,0,146,1115,1,0,0,0,148,1126,1,0,0,
		0,150,1128,1,0,0,0,152,1135,1,0,0,0,154,1137,1,0,0,0,156,1143,1,0,0,0,
		158,1146,1,0,0,0,160,1161,1,0,0,0,162,1163,1,0,0,0,164,1166,1,0,0,0,166,
		1179,1,0,0,0,168,1181,1,0,0,0,170,1200,1,0,0,0,172,1202,1,0,0,0,174,1214,
		1,0,0,0,176,1220,1,0,0,0,178,1224,1,0,0,0,180,1230,1,0,0,0,182,1238,1,
		0,0,0,184,1251,1,0,0,0,186,1255,1,0,0,0,188,1259,1,0,0,0,190,1278,1,0,
		0,0,192,1281,1,0,0,0,194,1287,1,0,0,0,196,1290,1,0,0,0,198,1300,1,0,0,
		0,200,1306,1,0,0,0,202,1318,1,0,0,0,204,1322,1,0,0,0,206,1331,1,0,0,0,
		208,1340,1,0,0,0,210,1344,1,0,0,0,212,1358,1,0,0,0,214,1365,1,0,0,0,216,
		1367,1,0,0,0,218,1375,1,0,0,0,220,1379,1,0,0,0,222,1386,1,0,0,0,224,1391,
		1,0,0,0,226,1401,1,0,0,0,228,1405,1,0,0,0,230,1415,1,0,0,0,232,1417,1,
		0,0,0,234,1425,1,0,0,0,236,1433,1,0,0,0,238,1437,1,0,0,0,240,1445,1,0,
		0,0,242,1452,1,0,0,0,244,1456,1,0,0,0,246,1458,1,0,0,0,248,1462,1,0,0,
		0,250,1470,1,0,0,0,252,1472,1,0,0,0,254,1481,1,0,0,0,256,1488,1,0,0,0,
		258,1491,1,0,0,0,260,1496,1,0,0,0,262,1498,1,0,0,0,264,1508,1,0,0,0,266,
		1510,1,0,0,0,268,1522,1,0,0,0,270,1531,1,0,0,0,272,1547,1,0,0,0,274,1559,
		1,0,0,0,276,1563,1,0,0,0,278,1566,1,0,0,0,280,1583,1,0,0,0,282,1590,1,
		0,0,0,284,1601,1,0,0,0,286,1604,1,0,0,0,288,1608,1,0,0,0,290,1622,1,0,
		0,0,292,1624,1,0,0,0,294,1632,1,0,0,0,296,1650,1,0,0,0,298,1654,1,0,0,
		0,300,1658,1,0,0,0,302,1662,1,0,0,0,304,1674,1,0,0,0,306,1676,1,0,0,0,
		308,1682,1,0,0,0,310,1684,1,0,0,0,312,1693,1,0,0,0,314,1706,1,0,0,0,316,
		1712,1,0,0,0,318,1714,1,0,0,0,320,1730,1,0,0,0,322,1732,1,0,0,0,324,1747,
		1,0,0,0,326,1756,1,0,0,0,328,1772,1,0,0,0,330,1775,1,0,0,0,332,1780,1,
		0,0,0,334,1786,1,0,0,0,336,1797,1,0,0,0,338,1821,1,0,0,0,340,1833,1,0,
		0,0,342,1839,1,0,0,0,344,1845,1,0,0,0,346,1853,1,0,0,0,348,350,5,1,0,0,
		349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,353,3,184,92,0,352,
		351,1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,356,3,188,94,0,355,354,
		1,0,0,0,355,356,1,0,0,0,356,360,1,0,0,0,357,359,3,282,141,0,358,357,1,
		0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,364,1,0,0,0,
		362,360,1,0,0,0,363,365,3,192,96,0,364,363,1,0,0,0,364,365,1,0,0,0,365,
		366,1,0,0,0,366,367,5,0,0,1,367,1,1,0,0,0,368,370,3,346,173,0,369,371,
		3,20,10,0,370,369,1,0,0,0,370,371,1,0,0,0,371,374,1,0,0,0,372,374,3,198,
		99,0,373,368,1,0,0,0,373,372,1,0,0,0,374,382,1,0,0,0,375,376,5,65,0,0,
		376,378,3,346,173,0,377,379,3,20,10,0,378,377,1,0,0,0,378,379,1,0,0,0,
		379,381,1,0,0,0,380,375,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,
		1,0,0,0,383,3,1,0,0,0,384,382,1,0,0,0,385,391,3,6,3,0,386,390,5,82,0,0,
		387,390,3,268,134,0,388,390,5,71,0,0,389,386,1,0,0,0,389,387,1,0,0,0,389,
		388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,5,1,0,
		0,0,393,391,1,0,0,0,394,400,3,12,6,0,395,400,3,18,9,0,396,397,5,15,0,0,
		397,400,5,71,0,0,398,400,3,8,4,0,399,394,1,0,0,0,399,395,1,0,0,0,399,396,
		1,0,0,0,399,398,1,0,0,0,400,7,1,0,0,0,401,402,5,63,0,0,402,405,3,10,5,
		0,403,404,5,66,0,0,404,406,3,10,5,0,405,403,1,0,0,0,406,407,1,0,0,0,407,
		405,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,410,5,64,0,0,410,9,1,0,
		0,0,411,413,3,4,2,0,412,414,3,346,173,0,413,412,1,0,0,0,413,414,1,0,0,
		0,414,11,1,0,0,0,415,418,3,14,7,0,416,418,5,9,0,0,417,415,1,0,0,0,417,
		416,1,0,0,0,418,13,1,0,0,0,419,422,3,16,8,0,420,422,5,12,0,0,421,419,1,
		0,0,0,421,420,1,0,0,0,422,15,1,0,0,0,423,427,1,0,0,0,424,427,5,11,0,0,
		425,427,5,10,0,0,426,423,1,0,0,0,426,424,1,0,0,0,426,425,1,0,0,0,427,17,
		1,0,0,0,428,432,3,2,1,0,429,432,5,14,0,0,430,432,5,13,0,0,431,428,1,0,
		0,0,431,429,1,0,0,0,431,430,1,0,0,0,432,19,1,0,0,0,433,434,5,80,0,0,434,
		439,3,4,2,0,435,436,5,66,0,0,436,438,3,4,2,0,437,435,1,0,0,0,438,441,1,
		0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,
		442,443,5,81,0,0,443,21,1,0,0,0,444,449,3,24,12,0,445,446,5,66,0,0,446,
		448,3,24,12,0,447,445,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,
		1,0,0,0,450,23,1,0,0,0,451,449,1,0,0,0,452,453,3,346,173,0,453,454,5,67,
		0,0,454,456,1,0,0,0,455,452,1,0,0,0,455,456,1,0,0,0,456,461,1,0,0,0,457,
		462,3,26,13,0,458,459,3,4,2,0,459,460,3,26,13,0,460,462,1,0,0,0,461,457,
		1,0,0,0,461,458,1,0,0,0,462,25,1,0,0,0,463,466,3,30,15,0,464,466,3,28,
		14,0,465,463,1,0,0,0,465,464,1,0,0,0,466,27,1,0,0,0,467,470,3,118,59,0,
		468,470,3,34,17,0,469,467,1,0,0,0,469,468,1,0,0,0,470,29,1,0,0,0,471,472,
		3,66,33,0,472,473,3,32,16,0,473,474,3,26,13,0,474,480,1,0,0,0,475,476,
		3,66,33,0,476,477,5,104,0,0,477,478,3,74,37,0,478,480,1,0,0,0,479,471,
		1,0,0,0,479,475,1,0,0,0,480,31,1,0,0,0,481,493,5,79,0,0,482,493,5,94,0,
		0,483,493,5,95,0,0,484,493,5,96,0,0,485,493,5,97,0,0,486,493,5,98,0,0,
		487,493,5,99,0,0,488,493,5,100,0,0,489,493,5,101,0,0,490,493,5,103,0,0,
		491,493,3,302,151,0,492,481,1,0,0,0,492,482,1,0,0,0,492,483,1,0,0,0,492,
		484,1,0,0,0,492,485,1,0,0,0,492,486,1,0,0,0,492,487,1,0,0,0,492,488,1,
		0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,491,1,0,0,0,493,33,1,0,0,0,494,
		500,3,36,18,0,495,496,5,82,0,0,496,497,3,74,37,0,497,498,5,67,0,0,498,
		499,3,74,37,0,499,501,1,0,0,0,500,495,1,0,0,0,500,501,1,0,0,0,501,35,1,
		0,0,0,502,508,3,38,19,0,503,506,5,84,0,0,504,507,3,36,18,0,505,507,3,76,
		38,0,506,504,1,0,0,0,506,505,1,0,0,0,507,509,1,0,0,0,508,503,1,0,0,0,508,
		509,1,0,0,0,509,37,1,0,0,0,510,515,3,40,20,0,511,512,5,88,0,0,512,514,
		3,40,20,0,513,511,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,
		0,0,516,39,1,0,0,0,517,515,1,0,0,0,518,523,3,42,21,0,519,520,5,87,0,0,
		520,522,3,42,21,0,521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,
		524,1,0,0,0,524,41,1,0,0,0,525,523,1,0,0,0,526,531,3,44,22,0,527,528,5,
		75,0,0,528,530,3,44,22,0,529,527,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,
		0,531,532,1,0,0,0,532,43,1,0,0,0,533,531,1,0,0,0,534,539,3,46,23,0,535,
		536,5,76,0,0,536,538,3,46,23,0,537,535,1,0,0,0,538,541,1,0,0,0,539,537,
		1,0,0,0,539,540,1,0,0,0,540,45,1,0,0,0,541,539,1,0,0,0,542,547,3,48,24,
		0,543,544,5,74,0,0,544,546,3,48,24,0,545,543,1,0,0,0,546,549,1,0,0,0,547,
		545,1,0,0,0,547,548,1,0,0,0,548,47,1,0,0,0,549,547,1,0,0,0,550,555,3,50,
		25,0,551,552,7,0,0,0,552,554,3,50,25,0,553,551,1,0,0,0,554,557,1,0,0,0,
		555,553,1,0,0,0,555,556,1,0,0,0,556,49,1,0,0,0,557,555,1,0,0,0,558,563,
		3,52,26,0,559,560,7,1,0,0,560,562,3,52,26,0,561,559,1,0,0,0,562,565,1,
		0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,51,1,0,0,0,565,563,1,0,0,0,566,
		574,3,54,27,0,567,570,5,102,0,0,568,570,3,300,150,0,569,567,1,0,0,0,569,
		568,1,0,0,0,570,571,1,0,0,0,571,573,3,54,27,0,572,569,1,0,0,0,573,576,
		1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,53,1,0,0,0,576,574,1,0,0,0,
		577,582,3,56,28,0,578,579,7,2,0,0,579,581,3,56,28,0,580,578,1,0,0,0,581,
		584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,55,1,0,0,0,584,582,1,0,
		0,0,585,590,3,58,29,0,586,587,7,3,0,0,587,589,3,58,29,0,588,586,1,0,0,
		0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,57,1,0,0,0,592,590,
		1,0,0,0,593,603,3,64,32,0,594,595,5,33,0,0,595,600,5,59,0,0,596,598,3,
		60,30,0,597,599,5,66,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,
		0,600,596,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,604,5,60,0,0,603,
		594,1,0,0,0,603,604,1,0,0,0,604,59,1,0,0,0,605,610,3,62,31,0,606,607,5,
		66,0,0,607,609,3,62,31,0,608,606,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,
		0,610,611,1,0,0,0,611,61,1,0,0,0,612,610,1,0,0,0,613,615,3,26,13,0,614,
		616,3,162,81,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,
		3,298,149,0,618,619,3,74,37,0,619,63,1,0,0,0,620,629,3,66,33,0,621,623,
		3,66,33,0,622,621,1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,626,5,105,
		0,0,625,627,3,66,33,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,
		628,620,1,0,0,0,628,622,1,0,0,0,629,65,1,0,0,0,630,649,3,68,34,0,631,649,
		3,70,35,0,632,633,5,69,0,0,633,649,3,66,33,0,634,635,5,70,0,0,635,649,
		3,66,33,0,636,637,5,78,0,0,637,649,3,66,33,0,638,639,5,85,0,0,639,649,
		3,66,33,0,640,641,5,86,0,0,641,649,3,66,33,0,642,643,5,74,0,0,643,649,
		3,66,33,0,644,645,5,71,0,0,645,649,3,66,33,0,646,647,5,76,0,0,647,649,
		3,66,33,0,648,630,1,0,0,0,648,631,1,0,0,0,648,632,1,0,0,0,648,634,1,0,
		0,0,648,636,1,0,0,0,648,638,1,0,0,0,648,640,1,0,0,0,648,642,1,0,0,0,648,
		644,1,0,0,0,648,646,1,0,0,0,649,67,1,0,0,0,650,651,5,63,0,0,651,652,3,
		4,2,0,652,653,5,64,0,0,653,654,3,66,33,0,654,69,1,0,0,0,655,657,3,72,36,
		0,656,658,5,77,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,662,1,0,0,0,659,
		661,3,80,40,0,660,659,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,
		1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,665,667,5,77,0,0,666,665,1,0,0,
		0,666,667,1,0,0,0,667,690,1,0,0,0,668,675,3,78,39,0,669,675,3,342,171,
		0,670,675,5,85,0,0,671,675,5,86,0,0,672,673,5,89,0,0,673,675,3,346,173,
		0,674,668,1,0,0,0,674,669,1,0,0,0,674,670,1,0,0,0,674,671,1,0,0,0,674,
		672,1,0,0,0,675,677,1,0,0,0,676,678,5,77,0,0,677,676,1,0,0,0,677,678,1,
		0,0,0,678,682,1,0,0,0,679,681,3,80,40,0,680,679,1,0,0,0,681,684,1,0,0,
		0,682,680,1,0,0,0,682,683,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,685,
		687,5,77,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,674,1,
		0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,71,1,0,0,0,692,
		690,1,0,0,0,693,767,3,304,152,0,694,696,3,346,173,0,695,697,3,20,10,0,
		696,695,1,0,0,0,696,697,1,0,0,0,697,767,1,0,0,0,698,699,5,63,0,0,699,700,
		3,26,13,0,700,701,5,64,0,0,701,767,1,0,0,0,702,767,3,84,42,0,703,767,3,
		198,99,0,704,767,5,49,0,0,705,767,5,47,0,0,706,716,5,23,0,0,707,708,5,
		65,0,0,708,710,3,346,173,0,709,711,3,20,10,0,710,709,1,0,0,0,710,711,1,
		0,0,0,711,717,1,0,0,0,712,713,5,61,0,0,713,714,3,86,43,0,714,715,5,62,
		0,0,715,717,1,0,0,0,716,707,1,0,0,0,716,712,1,0,0,0,717,767,1,0,0,0,718,
		747,5,19,0,0,719,741,3,4,2,0,720,742,3,344,172,0,721,742,3,88,44,0,722,
		723,5,61,0,0,723,724,3,86,43,0,724,728,5,62,0,0,725,727,3,268,134,0,726,
		725,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,732,1,
		0,0,0,730,728,1,0,0,0,731,733,3,270,135,0,732,731,1,0,0,0,732,733,1,0,
		0,0,733,742,1,0,0,0,734,736,3,268,134,0,735,734,1,0,0,0,736,737,1,0,0,
		0,737,735,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,740,3,270,135,0,
		740,742,1,0,0,0,741,720,1,0,0,0,741,721,1,0,0,0,741,722,1,0,0,0,741,735,
		1,0,0,0,742,748,1,0,0,0,743,748,3,102,51,0,744,745,3,268,134,0,745,746,
		3,270,135,0,746,748,1,0,0,0,747,719,1,0,0,0,747,743,1,0,0,0,747,744,1,
		0,0,0,748,767,1,0,0,0,749,750,5,63,0,0,750,753,3,24,12,0,751,752,5,66,
		0,0,752,754,3,24,12,0,753,751,1,0,0,0,754,755,1,0,0,0,755,753,1,0,0,0,
		755,756,1,0,0,0,756,757,1,0,0,0,757,758,5,64,0,0,758,767,1,0,0,0,759,764,
		5,35,0,0,760,761,5,63,0,0,761,762,3,4,2,0,762,763,5,64,0,0,763,765,1,0,
		0,0,764,760,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,693,1,0,0,0,766,
		694,1,0,0,0,766,698,1,0,0,0,766,702,1,0,0,0,766,703,1,0,0,0,766,704,1,
		0,0,0,766,705,1,0,0,0,766,706,1,0,0,0,766,718,1,0,0,0,766,749,1,0,0,0,
		766,759,1,0,0,0,767,73,1,0,0,0,768,771,3,26,13,0,769,771,3,76,38,0,770,
		768,1,0,0,0,770,769,1,0,0,0,771,75,1,0,0,0,772,773,5,44,0,0,773,774,3,
		26,13,0,774,77,1,0,0,0,775,777,5,82,0,0,776,775,1,0,0,0,776,777,1,0,0,
		0,777,778,1,0,0,0,778,779,5,65,0,0,779,781,3,346,173,0,780,782,3,20,10,
		0,781,780,1,0,0,0,781,782,1,0,0,0,782,79,1,0,0,0,783,785,5,82,0,0,784,
		783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,787,5,61,0,0,787,792,3,
		82,41,0,788,789,5,66,0,0,789,791,3,82,41,0,790,788,1,0,0,0,791,794,1,0,
		0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,792,1,0,0,0,795,
		796,5,62,0,0,796,81,1,0,0,0,797,798,3,346,173,0,798,799,5,67,0,0,799,801,
		1,0,0,0,800,797,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,803,3,26,13,
		0,803,83,1,0,0,0,804,805,7,4,0,0,805,85,1,0,0,0,806,811,3,26,13,0,807,
		808,5,66,0,0,808,810,3,26,13,0,809,807,1,0,0,0,810,813,1,0,0,0,811,809,
		1,0,0,0,811,812,1,0,0,0,812,87,1,0,0,0,813,811,1,0,0,0,814,817,3,90,45,
		0,815,817,3,98,49,0,816,814,1,0,0,0,816,815,1,0,0,0,817,89,1,0,0,0,818,
		823,5,59,0,0,819,821,3,92,46,0,820,822,5,66,0,0,821,820,1,0,0,0,821,822,
		1,0,0,0,822,824,1,0,0,0,823,819,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,
		0,825,826,5,60,0,0,826,91,1,0,0,0,827,832,3,94,47,0,828,829,5,66,0,0,829,
		831,3,94,47,0,830,828,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,
		1,0,0,0,833,93,1,0,0,0,834,832,1,0,0,0,835,841,3,346,173,0,836,837,5,61,
		0,0,837,838,3,26,13,0,838,839,5,62,0,0,839,841,1,0,0,0,840,835,1,0,0,0,
		840,836,1,0,0,0,841,842,1,0,0,0,842,843,5,79,0,0,843,844,3,96,48,0,844,
		95,1,0,0,0,845,848,3,26,13,0,846,848,3,88,44,0,847,845,1,0,0,0,847,846,
		1,0,0,0,848,97,1,0,0,0,849,850,5,59,0,0,850,855,3,100,50,0,851,852,5,66,
		0,0,852,854,3,100,50,0,853,851,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,
		855,856,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,858,860,5,66,0,0,859,858,
		1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,862,5,60,0,0,862,99,1,0,0,
		0,863,869,3,28,14,0,864,865,5,59,0,0,865,866,3,86,43,0,866,867,5,60,0,
		0,867,869,1,0,0,0,868,863,1,0,0,0,868,864,1,0,0,0,869,101,1,0,0,0,870,
		875,5,59,0,0,871,873,3,104,52,0,872,874,5,66,0,0,873,872,1,0,0,0,873,874,
		1,0,0,0,874,876,1,0,0,0,875,871,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,
		0,877,878,5,60,0,0,878,103,1,0,0,0,879,884,3,106,53,0,880,881,5,66,0,0,
		881,883,3,106,53,0,882,880,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,
		885,1,0,0,0,885,105,1,0,0,0,886,884,1,0,0,0,887,893,3,70,35,0,888,889,
		3,346,173,0,889,890,5,79,0,0,890,891,3,26,13,0,891,893,1,0,0,0,892,887,
		1,0,0,0,892,888,1,0,0,0,893,107,1,0,0,0,894,903,3,346,173,0,895,897,3,
		110,55,0,896,895,1,0,0,0,896,897,1,0,0,0,897,904,1,0,0,0,898,899,5,83,
		0,0,899,901,3,346,173,0,900,902,3,110,55,0,901,900,1,0,0,0,901,902,1,0,
		0,0,902,904,1,0,0,0,903,896,1,0,0,0,903,898,1,0,0,0,904,912,1,0,0,0,905,
		906,5,65,0,0,906,908,3,346,173,0,907,909,3,110,55,0,908,907,1,0,0,0,908,
		909,1,0,0,0,909,911,1,0,0,0,910,905,1,0,0,0,911,914,1,0,0,0,912,910,1,
		0,0,0,912,913,1,0,0,0,913,109,1,0,0,0,914,912,1,0,0,0,915,919,5,80,0,0,
		916,918,5,66,0,0,917,916,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,
		1,0,0,0,920,922,1,0,0,0,921,919,1,0,0,0,922,923,5,81,0,0,923,111,1,0,0,
		0,924,929,3,6,3,0,925,928,3,268,134,0,926,928,5,71,0,0,927,925,1,0,0,0,
		927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,933,
		1,0,0,0,931,929,1,0,0,0,932,934,5,82,0,0,933,932,1,0,0,0,933,934,1,0,0,
		0,934,936,1,0,0,0,935,937,3,114,57,0,936,935,1,0,0,0,936,937,1,0,0,0,937,
		939,1,0,0,0,938,940,3,346,173,0,939,938,1,0,0,0,939,940,1,0,0,0,940,113,
		1,0,0,0,941,942,5,59,0,0,942,947,3,116,58,0,943,944,5,66,0,0,944,946,3,
		116,58,0,945,943,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,
		0,948,950,1,0,0,0,949,947,1,0,0,0,950,951,5,60,0,0,951,115,1,0,0,0,952,
		953,3,346,173,0,953,954,5,67,0,0,954,955,3,26,13,0,955,117,1,0,0,0,956,
		957,3,120,60,0,957,958,3,298,149,0,958,959,3,128,64,0,959,119,1,0,0,0,
		960,961,5,63,0,0,961,972,5,64,0,0,962,963,5,63,0,0,963,964,3,122,61,0,
		964,965,5,64,0,0,965,972,1,0,0,0,966,967,5,63,0,0,967,968,3,126,63,0,968,
		969,5,64,0,0,969,972,1,0,0,0,970,972,3,346,173,0,971,960,1,0,0,0,971,962,
		1,0,0,0,971,966,1,0,0,0,971,970,1,0,0,0,972,121,1,0,0,0,973,978,3,124,
		62,0,974,975,5,66,0,0,975,977,3,124,62,0,976,974,1,0,0,0,977,980,1,0,0,
		0,978,976,1,0,0,0,978,979,1,0,0,0,979,123,1,0,0,0,980,978,1,0,0,0,981,
		982,3,4,2,0,982,983,3,346,173,0,983,125,1,0,0,0,984,989,3,346,173,0,985,
		986,5,66,0,0,986,988,3,346,173,0,987,985,1,0,0,0,988,991,1,0,0,0,989,987,
		1,0,0,0,989,990,1,0,0,0,990,127,1,0,0,0,991,989,1,0,0,0,992,995,3,74,37,
		0,993,995,3,144,72,0,994,992,1,0,0,0,994,993,1,0,0,0,995,129,1,0,0,0,996,
		1000,3,138,69,0,997,1000,3,132,66,0,998,1000,3,140,70,0,999,996,1,0,0,
		0,999,997,1,0,0,0,999,998,1,0,0,0,1000,131,1,0,0,0,1001,1002,3,146,73,
		0,1002,1003,5,68,0,0,1003,1008,1,0,0,0,1004,1005,3,154,77,0,1005,1006,
		5,68,0,0,1006,1008,1,0,0,0,1007,1001,1,0,0,0,1007,1004,1,0,0,0,1008,133,
		1,0,0,0,1009,1011,5,28,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,135,
		1,0,0,0,1012,1018,3,144,72,0,1013,1014,3,298,149,0,1014,1015,3,74,37,0,
		1015,1016,5,68,0,0,1016,1018,1,0,0,0,1017,1012,1,0,0,0,1017,1013,1,0,0,
		0,1018,137,1,0,0,0,1019,1020,3,346,173,0,1020,1021,5,67,0,0,1021,1022,
		3,130,65,0,1022,139,1,0,0,0,1023,1026,3,144,72,0,1024,1026,3,142,71,0,
		1025,1023,1,0,0,0,1025,1024,1,0,0,0,1026,141,1,0,0,0,1027,1108,5,68,0,
		0,1028,1029,3,26,13,0,1029,1030,5,68,0,0,1030,1108,1,0,0,0,1031,1032,5,
		31,0,0,1032,1033,5,63,0,0,1033,1034,3,26,13,0,1034,1035,5,64,0,0,1035,
		1038,3,156,78,0,1036,1037,5,32,0,0,1037,1039,3,156,78,0,1038,1036,1,0,
		0,0,1038,1039,1,0,0,0,1039,1108,1,0,0,0,1040,1041,5,33,0,0,1041,1042,5,
		63,0,0,1042,1043,3,26,13,0,1043,1044,5,64,0,0,1044,1048,5,59,0,0,1045,
		1047,3,158,79,0,1046,1045,1,0,0,0,1047,1050,1,0,0,0,1048,1046,1,0,0,0,
		1048,1049,1,0,0,0,1049,1051,1,0,0,0,1050,1048,1,0,0,0,1051,1052,5,60,0,
		0,1052,1108,1,0,0,0,1053,1054,5,37,0,0,1054,1055,5,63,0,0,1055,1056,3,
		26,13,0,1056,1057,5,64,0,0,1057,1058,3,140,70,0,1058,1108,1,0,0,0,1059,
		1060,5,38,0,0,1060,1061,3,140,70,0,1061,1062,5,37,0,0,1062,1063,5,63,0,
		0,1063,1064,3,26,13,0,1064,1065,5,64,0,0,1065,1066,5,68,0,0,1066,1108,
		1,0,0,0,1067,1068,5,36,0,0,1068,1070,5,63,0,0,1069,1071,3,166,83,0,1070,
		1069,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1074,5,68,0,0,1073,
		1075,3,26,13,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,
		1078,5,68,0,0,1077,1079,3,168,84,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,
		1079,1080,1,0,0,0,1080,1081,5,64,0,0,1081,1108,3,140,70,0,1082,1083,5,
		39,0,0,1083,1108,5,68,0,0,1084,1085,5,40,0,0,1085,1108,5,68,0,0,1086,1088,
		5,46,0,0,1087,1089,3,26,13,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,
		1090,1,0,0,0,1090,1108,5,68,0,0,1091,1093,5,44,0,0,1092,1094,3,26,13,0,
		1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1108,5,68,0,
		0,1096,1097,5,42,0,0,1097,1098,3,144,72,0,1098,1099,3,170,85,0,1099,1108,
		1,0,0,0,1100,1104,5,41,0,0,1101,1102,5,46,0,0,1102,1105,3,26,13,0,1103,
		1105,5,39,0,0,1104,1101,1,0,0,0,1104,1103,1,0,0,0,1105,1106,1,0,0,0,1106,
		1108,5,68,0,0,1107,1027,1,0,0,0,1107,1028,1,0,0,0,1107,1031,1,0,0,0,1107,
		1040,1,0,0,0,1107,1053,1,0,0,0,1107,1059,1,0,0,0,1107,1067,1,0,0,0,1107,
		1082,1,0,0,0,1107,1084,1,0,0,0,1107,1086,1,0,0,0,1107,1091,1,0,0,0,1107,
		1096,1,0,0,0,1107,1100,1,0,0,0,1108,143,1,0,0,0,1109,1111,5,59,0,0,1110,
		1112,3,164,82,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,
		1113,1114,5,60,0,0,1114,145,1,0,0,0,1115,1116,3,148,74,0,1116,1123,3,150,
		75,0,1117,1118,5,66,0,0,1118,1119,3,150,75,0,1119,1120,4,73,0,0,1120,1122,
		1,0,0,0,1121,1117,1,0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,1124,
		1,0,0,0,1124,147,1,0,0,0,1125,1123,1,0,0,0,1126,1127,3,4,2,0,1127,149,
		1,0,0,0,1128,1131,3,346,173,0,1129,1130,5,79,0,0,1130,1132,3,152,76,0,
		1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,151,1,0,0,0,1133,1136,3,26,13,
		0,1134,1136,3,270,135,0,1135,1133,1,0,0,0,1135,1134,1,0,0,0,1136,153,1,
		0,0,0,1137,1138,5,20,0,0,1138,1139,3,4,2,0,1139,1140,3,234,117,0,1140,
		155,1,0,0,0,1141,1144,3,144,72,0,1142,1144,3,142,71,0,1143,1141,1,0,0,
		0,1143,1142,1,0,0,0,1144,157,1,0,0,0,1145,1147,3,160,80,0,1146,1145,1,
		0,0,0,1147,1148,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1150,
		1,0,0,0,1150,1151,3,164,82,0,1151,159,1,0,0,0,1152,1153,5,34,0,0,1153,
		1155,3,26,13,0,1154,1156,3,162,81,0,1155,1154,1,0,0,0,1155,1156,1,0,0,
		0,1156,1157,1,0,0,0,1157,1158,5,67,0,0,1158,1162,1,0,0,0,1159,1160,5,35,
		0,0,1160,1162,5,67,0,0,1161,1152,1,0,0,0,1161,1159,1,0,0,0,1162,161,1,
		0,0,0,1163,1164,3,26,13,0,1164,163,1,0,0,0,1165,1167,3,130,65,0,1166,1165,
		1,0,0,0,1167,1168,1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,165,
		1,0,0,0,1170,1180,3,146,73,0,1171,1176,3,26,13,0,1172,1173,5,66,0,0,1173,
		1175,3,26,13,0,1174,1172,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,
		1177,1,0,0,0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1179,1170,1,0,0,0,1179,
		1171,1,0,0,0,1180,167,1,0,0,0,1181,1186,3,26,13,0,1182,1183,5,66,0,0,1183,
		1185,3,26,13,0,1184,1182,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,
		1187,1,0,0,0,1187,169,1,0,0,0,1188,1186,1,0,0,0,1189,1193,3,172,86,0,1190,
		1192,3,172,86,0,1191,1190,1,0,0,0,1192,1195,1,0,0,0,1193,1191,1,0,0,0,
		1193,1194,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1196,1198,3,174,
		87,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1201,1,0,0,0,1199,1201,3,
		174,87,0,1200,1189,1,0,0,0,1200,1199,1,0,0,0,1201,171,1,0,0,0,1202,1203,
		5,43,0,0,1203,1204,5,63,0,0,1204,1206,3,18,9,0,1205,1207,3,346,173,0,1206,
		1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1210,5,64,0,0,1209,
		1211,3,176,88,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,
		1212,1213,3,144,72,0,1213,173,1,0,0,0,1214,1216,5,43,0,0,1215,1217,3,176,
		88,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,1219,3,
		144,72,0,1219,175,1,0,0,0,1220,1221,5,63,0,0,1221,1222,3,26,13,0,1222,
		1223,5,64,0,0,1223,177,1,0,0,0,1224,1225,5,29,0,0,1225,1226,3,180,90,0,
		1226,1228,3,182,91,0,1227,1229,5,68,0,0,1228,1227,1,0,0,0,1228,1229,1,
		0,0,0,1229,179,1,0,0,0,1230,1235,3,346,173,0,1231,1232,5,65,0,0,1232,1234,
		3,346,173,0,1233,1231,1,0,0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,
		1236,1,0,0,0,1236,181,1,0,0,0,1237,1235,1,0,0,0,1238,1240,5,59,0,0,1239,
		1241,3,184,92,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,0,
		1242,1244,3,188,94,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,1246,1,0,
		0,0,1245,1247,3,192,96,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1248,
		1,0,0,0,1248,1249,5,60,0,0,1249,183,1,0,0,0,1250,1252,3,186,93,0,1251,
		1250,1,0,0,0,1252,1253,1,0,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,
		185,1,0,0,0,1255,1256,3,346,173,0,1256,1257,5,68,0,0,1257,187,1,0,0,0,
		1258,1260,3,190,95,0,1259,1258,1,0,0,0,1260,1261,1,0,0,0,1261,1259,1,0,
		0,0,1261,1262,1,0,0,0,1262,189,1,0,0,0,1263,1264,5,24,0,0,1264,1265,3,
		346,173,0,1265,1266,5,79,0,0,1266,1267,3,2,1,0,1267,1268,5,68,0,0,1268,
		1279,1,0,0,0,1269,1270,5,24,0,0,1270,1271,3,2,1,0,1271,1272,5,68,0,0,1272,
		1279,1,0,0,0,1273,1274,5,24,0,0,1274,1275,5,28,0,0,1275,1276,3,2,1,0,1276,
		1277,5,68,0,0,1277,1279,1,0,0,0,1278,1263,1,0,0,0,1278,1269,1,0,0,0,1278,
		1273,1,0,0,0,1279,191,1,0,0,0,1280,1282,3,194,97,0,1281,1280,1,0,0,0,1282,
		1283,1,0,0,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,193,1,0,0,0,1285,
		1288,3,178,89,0,1286,1288,3,196,98,0,1287,1285,1,0,0,0,1287,1286,1,0,0,
		0,1288,195,1,0,0,0,1289,1291,3,286,143,0,1290,1289,1,0,0,0,1290,1291,1,
		0,0,0,1291,1293,1,0,0,0,1292,1294,3,226,113,0,1293,1292,1,0,0,0,1293,1294,
		1,0,0,0,1294,1298,1,0,0,0,1295,1299,3,322,161,0,1296,1299,3,324,162,0,
		1297,1299,3,326,163,0,1298,1295,1,0,0,0,1298,1296,1,0,0,0,1298,1297,1,
		0,0,0,1299,197,1,0,0,0,1300,1301,3,346,173,0,1301,1302,5,83,0,0,1302,1304,
		3,346,173,0,1303,1305,3,20,10,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,
		199,1,0,0,0,1306,1307,5,80,0,0,1307,1312,3,202,101,0,1308,1309,5,66,0,
		0,1309,1311,3,202,101,0,1310,1308,1,0,0,0,1311,1314,1,0,0,0,1312,1310,
		1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1312,1,0,0,0,1315,1316,
		5,81,0,0,1316,201,1,0,0,0,1317,1319,3,286,143,0,1318,1317,1,0,0,0,1318,
		1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,3,346,173,0,1321,203,1,0,0,0,
		1322,1323,5,67,0,0,1323,1328,3,18,9,0,1324,1325,5,66,0,0,1325,1327,3,2,
		1,0,1326,1324,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1328,1329,1,
		0,0,0,1329,205,1,0,0,0,1330,1328,1,0,0,0,1331,1336,3,2,1,0,1332,1333,5,
		66,0,0,1333,1335,3,2,1,0,1334,1332,1,0,0,0,1335,1338,1,0,0,0,1336,1334,
		1,0,0,0,1336,1337,1,0,0,0,1337,207,1,0,0,0,1338,1336,1,0,0,0,1339,1341,
		3,210,105,0,1340,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1340,1,0,0,0,1342,
		1343,1,0,0,0,1343,209,1,0,0,0,1344,1345,3,346,173,0,1345,1346,5,67,0,0,
		1346,1347,3,212,106,0,1347,211,1,0,0,0,1348,1359,3,218,109,0,1349,1352,
		3,214,107,0,1350,1351,5,66,0,0,1351,1353,3,216,108,0,1352,1350,1,0,0,0,
		1352,1353,1,0,0,0,1353,1356,1,0,0,0,1354,1355,5,66,0,0,1355,1357,3,218,
		109,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,1359,1,0,0,0,1358,1348,
		1,0,0,0,1358,1349,1,0,0,0,1359,213,1,0,0,0,1360,1366,3,18,9,0,1361,1363,
		5,21,0,0,1362,1364,5,82,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1366,
		1,0,0,0,1365,1360,1,0,0,0,1365,1361,1,0,0,0,1366,215,1,0,0,0,1367,1372,
		3,2,1,0,1368,1369,5,66,0,0,1369,1371,3,2,1,0,1370,1368,1,0,0,0,1371,1374,
		1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,217,1,0,0,0,1374,1372,
		1,0,0,0,1375,1376,5,19,0,0,1376,1377,5,63,0,0,1377,1378,5,64,0,0,1378,
		219,1,0,0,0,1379,1381,5,59,0,0,1380,1382,3,222,111,0,1381,1380,1,0,0,0,
		1381,1382,1,0,0,0,1382,1383,1,0,0,0,1383,1384,5,60,0,0,1384,221,1,0,0,
		0,1385,1387,3,224,112,0,1386,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1386,
		1,0,0,0,1388,1389,1,0,0,0,1389,223,1,0,0,0,1390,1392,3,286,143,0,1391,
		1390,1,0,0,0,1391,1392,1,0,0,0,1392,1394,1,0,0,0,1393,1395,3,226,113,0,
		1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,1398,1,0,0,0,1396,1399,3,230,
		115,0,1397,1399,3,332,166,0,1398,1396,1,0,0,0,1398,1397,1,0,0,0,1399,225,
		1,0,0,0,1400,1402,3,228,114,0,1401,1400,1,0,0,0,1402,1403,1,0,0,0,1403,
		1401,1,0,0,0,1403,1404,1,0,0,0,1404,227,1,0,0,0,1405,1406,7,5,0,0,1406,
		229,1,0,0,0,1407,1416,3,330,165,0,1408,1416,3,232,116,0,1409,1416,3,334,
		167,0,1410,1411,5,15,0,0,1411,1416,3,336,168,0,1412,1416,3,322,161,0,1413,
		1416,3,324,162,0,1414,1416,3,326,163,0,1415,1407,1,0,0,0,1415,1408,1,0,
		0,0,1415,1409,1,0,0,0,1415,1410,1,0,0,0,1415,1412,1,0,0,0,1415,1413,1,
		0,0,0,1415,1414,1,0,0,0,1416,231,1,0,0,0,1417,1423,3,4,2,0,1418,1419,3,
		2,1,0,1419,1420,5,65,0,0,1420,1424,1,0,0,0,1421,1424,3,336,168,0,1422,
		1424,3,328,164,0,1423,1418,1,0,0,0,1423,1421,1,0,0,0,1423,1422,1,0,0,0,
		1424,233,1,0,0,0,1425,1430,3,236,118,0,1426,1427,5,66,0,0,1427,1429,3,
		236,118,0,1428,1426,1,0,0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,1430,1431,
		1,0,0,0,1431,235,1,0,0,0,1432,1430,1,0,0,0,1433,1434,3,346,173,0,1434,
		1435,5,79,0,0,1435,1436,3,26,13,0,1436,237,1,0,0,0,1437,1442,3,240,120,
		0,1438,1439,5,66,0,0,1439,1441,3,240,120,0,1440,1438,1,0,0,0,1441,1444,
		1,0,0,0,1442,1440,1,0,0,0,1442,1443,1,0,0,0,1443,239,1,0,0,0,1444,1442,
		1,0,0,0,1445,1448,3,346,173,0,1446,1447,5,79,0,0,1447,1449,3,242,121,0,
		1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,241,1,0,0,0,1450,1453,3,26,13,
		0,1451,1453,3,270,135,0,1452,1450,1,0,0,0,1452,1451,1,0,0,0,1453,243,1,
		0,0,0,1454,1457,3,4,2,0,1455,1457,5,15,0,0,1456,1454,1,0,0,0,1456,1455,
		1,0,0,0,1457,245,1,0,0,0,1458,1459,3,2,1,0,1459,247,1,0,0,0,1460,1463,
		3,144,72,0,1461,1463,5,68,0,0,1462,1460,1,0,0,0,1462,1461,1,0,0,0,1463,
		249,1,0,0,0,1464,1471,3,258,129,0,1465,1468,3,252,126,0,1466,1467,5,66,
		0,0,1467,1469,3,258,129,0,1468,1466,1,0,0,0,1468,1469,1,0,0,0,1469,1471,
		1,0,0,0,1470,1464,1,0,0,0,1470,1465,1,0,0,0,1471,251,1,0,0,0,1472,1477,
		3,254,127,0,1473,1474,5,66,0,0,1474,1476,3,254,127,0,1475,1473,1,0,0,0,
		1476,1479,1,0,0,0,1477,1475,1,0,0,0,1477,1478,1,0,0,0,1478,253,1,0,0,0,
		1479,1477,1,0,0,0,1480,1482,3,286,143,0,1481,1480,1,0,0,0,1481,1482,1,
		0,0,0,1482,1484,1,0,0,0,1483,1485,3,256,128,0,1484,1483,1,0,0,0,1484,1485,
		1,0,0,0,1485,1486,1,0,0,0,1486,1487,3,340,170,0,1487,255,1,0,0,0,1488,
		1489,5,47,0,0,1489,257,1,0,0,0,1490,1492,3,286,143,0,1491,1490,1,0,0,0,
		1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1494,3,266,133,0,1494,1495,3,
		346,173,0,1495,259,1,0,0,0,1496,1497,7,6,0,0,1497,261,1,0,0,0,1498,1499,
		5,67,0,0,1499,1500,7,7,0,0,1500,1502,5,63,0,0,1501,1503,3,22,11,0,1502,
		1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1505,5,64,0,0,1505,
		263,1,0,0,0,1506,1509,3,144,72,0,1507,1509,5,68,0,0,1508,1506,1,0,0,0,
		1508,1507,1,0,0,0,1509,265,1,0,0,0,1510,1518,3,6,3,0,1511,1513,7,8,0,0,
		1512,1511,1,0,0,0,1513,1516,1,0,0,0,1514,1512,1,0,0,0,1514,1515,1,0,0,
		0,1515,1517,1,0,0,0,1516,1514,1,0,0,0,1517,1519,3,268,134,0,1518,1514,
		1,0,0,0,1519,1520,1,0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,0,1521,267,
		1,0,0,0,1522,1526,5,61,0,0,1523,1525,5,66,0,0,1524,1523,1,0,0,0,1525,1528,
		1,0,0,0,1526,1524,1,0,0,0,1526,1527,1,0,0,0,1527,1529,1,0,0,0,1528,1526,
		1,0,0,0,1529,1530,5,62,0,0,1530,269,1,0,0,0,1531,1543,5,59,0,0,1532,1537,
		3,242,121,0,1533,1534,5,66,0,0,1534,1536,3,242,121,0,1535,1533,1,0,0,0,
		1536,1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1541,1,0,0,
		0,1539,1537,1,0,0,0,1540,1542,5,66,0,0,1541,1540,1,0,0,0,1541,1542,1,0,
		0,0,1542,1544,1,0,0,0,1543,1532,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,
		0,0,0,1545,1546,5,60,0,0,1546,271,1,0,0,0,1547,1548,5,80,0,0,1548,1553,
		3,274,137,0,1549,1550,5,66,0,0,1550,1552,3,274,137,0,1551,1549,1,0,0,0,
		1552,1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1556,1,0,0,
		0,1555,1553,1,0,0,0,1556,1557,5,81,0,0,1557,273,1,0,0,0,1558,1560,3,286,
		143,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,1562,
		3,346,173,0,1562,275,1,0,0,0,1563,1564,5,67,0,0,1564,1565,3,4,2,0,1565,
		277,1,0,0,0,1566,1578,5,59,0,0,1567,1572,3,280,140,0,1568,1569,5,66,0,
		0,1569,1571,3,280,140,0,1570,1568,1,0,0,0,1571,1574,1,0,0,0,1572,1570,
		1,0,0,0,1572,1573,1,0,0,0,1573,1576,1,0,0,0,1574,1572,1,0,0,0,1575,1577,
		5,66,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1567,
		1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,5,60,0,0,1581,279,
		1,0,0,0,1582,1584,3,286,143,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,
		1585,1,0,0,0,1585,1588,3,346,173,0,1586,1587,5,79,0,0,1587,1589,3,26,13,
		0,1588,1586,1,0,0,0,1588,1589,1,0,0,0,1589,281,1,0,0,0,1590,1591,5,61,
		0,0,1591,1592,3,284,142,0,1592,1593,5,67,0,0,1593,1595,3,292,146,0,1594,
		1596,5,66,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,
		1598,5,62,0,0,1598,283,1,0,0,0,1599,1602,3,320,160,0,1600,1602,3,346,173,
		0,1601,1599,1,0,0,0,1601,1600,1,0,0,0,1602,285,1,0,0,0,1603,1605,3,288,
		144,0,1604,1603,1,0,0,0,1605,1606,1,0,0,0,1606,1604,1,0,0,0,1606,1607,
		1,0,0,0,1607,287,1,0,0,0,1608,1612,5,61,0,0,1609,1610,3,290,145,0,1610,
		1611,5,67,0,0,1611,1613,1,0,0,0,1612,1609,1,0,0,0,1612,1613,1,0,0,0,1613,
		1614,1,0,0,0,1614,1616,3,292,146,0,1615,1617,5,66,0,0,1616,1615,1,0,0,
		0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,1619,5,62,0,0,1619,289,1,0,
		0,0,1620,1623,3,320,160,0,1621,1623,3,346,173,0,1622,1620,1,0,0,0,1622,
		1621,1,0,0,0,1623,291,1,0,0,0,1624,1629,3,294,147,0,1625,1626,5,66,0,0,
		1626,1628,3,294,147,0,1627,1625,1,0,0,0,1628,1631,1,0,0,0,1629,1627,1,
		0,0,0,1629,1630,1,0,0,0,1630,293,1,0,0,0,1631,1629,1,0,0,0,1632,1645,3,
		2,1,0,1633,1642,5,63,0,0,1634,1639,3,296,148,0,1635,1636,5,66,0,0,1636,
		1638,3,296,148,0,1637,1635,1,0,0,0,1638,1641,1,0,0,0,1639,1637,1,0,0,0,
		1639,1640,1,0,0,0,1640,1643,1,0,0,0,1641,1639,1,0,0,0,1642,1634,1,0,0,
		0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1646,5,64,0,0,1645,1633,1,0,
		0,0,1645,1646,1,0,0,0,1646,295,1,0,0,0,1647,1648,3,346,173,0,1648,1649,
		5,67,0,0,1649,1651,1,0,0,0,1650,1647,1,0,0,0,1650,1651,1,0,0,0,1651,1652,
		1,0,0,0,1652,1653,3,26,13,0,1653,297,1,0,0,0,1654,1655,5,79,0,0,1655,1656,
		5,81,0,0,1656,1657,4,149,1,1,1657,299,1,0,0,0,1658,1659,5,81,0,0,1659,
		1660,5,81,0,0,1660,1661,4,150,2,1,1661,301,1,0,0,0,1662,1663,5,81,0,0,
		1663,1664,5,93,0,0,1664,1665,4,151,3,1,1665,303,1,0,0,0,1666,1675,3,306,
		153,0,1667,1675,3,308,154,0,1668,1675,5,50,0,0,1669,1675,5,51,0,0,1670,
		1675,5,52,0,0,1671,1675,5,53,0,0,1672,1675,5,54,0,0,1673,1675,5,18,0,0,
		1674,1666,1,0,0,0,1674,1667,1,0,0,0,1674,1668,1,0,0,0,1674,1669,1,0,0,
		0,1674,1670,1,0,0,0,1674,1671,1,0,0,0,1674,1672,1,0,0,0,1674,1673,1,0,
		0,0,1675,305,1,0,0,0,1676,1677,7,9,0,0,1677,307,1,0,0,0,1678,1683,3,310,
		155,0,1679,1683,3,312,156,0,1680,1683,5,55,0,0,1681,1683,5,56,0,0,1682,
		1678,1,0,0,0,1682,1679,1,0,0,0,1682,1680,1,0,0,0,1682,1681,1,0,0,0,1683,
		309,1,0,0,0,1684,1688,5,57,0,0,1685,1687,3,314,157,0,1686,1685,1,0,0,0,
		1687,1690,1,0,0,0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,1691,1,0,0,
		0,1690,1688,1,0,0,0,1691,1692,5,110,0,0,1692,311,1,0,0,0,1693,1697,5,58,
		0,0,1694,1696,3,316,158,0,1695,1694,1,0,0,0,1696,1699,1,0,0,0,1697,1695,
		1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1697,1,0,0,0,1700,1701,
		5,110,0,0,1701,313,1,0,0,0,1702,1707,3,318,159,0,1703,1707,5,106,0,0,1704,
		1707,5,108,0,0,1705,1707,5,111,0,0,1706,1702,1,0,0,0,1706,1703,1,0,0,0,
		1706,1704,1,0,0,0,1706,1705,1,0,0,0,1707,315,1,0,0,0,1708,1713,3,318,159,
		0,1709,1713,5,106,0,0,1710,1713,5,109,0,0,1711,1713,5,112,0,0,1712,1708,
		1,0,0,0,1712,1709,1,0,0,0,1712,1710,1,0,0,0,1712,1711,1,0,0,0,1713,317,
		1,0,0,0,1714,1719,3,26,13,0,1715,1716,5,66,0,0,1716,1718,3,26,13,0,1717,
		1715,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,
		1728,1,0,0,0,1721,1719,1,0,0,0,1722,1724,5,67,0,0,1723,1725,5,114,0,0,
		1724,1723,1,0,0,0,1725,1726,1,0,0,0,1726,1724,1,0,0,0,1726,1727,1,0,0,
		0,1727,1729,1,0,0,0,1728,1722,1,0,0,0,1728,1729,1,0,0,0,1729,319,1,0,0,
		0,1730,1731,7,10,0,0,1731,321,1,0,0,0,1732,1733,5,21,0,0,1733,1735,3,346,
		173,0,1734,1736,3,200,100,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,
		1,0,0,0,1737,1739,3,204,102,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,
		1741,1,0,0,0,1740,1742,3,208,104,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,
		1742,1743,1,0,0,0,1743,1745,3,220,110,0,1744,1746,5,68,0,0,1745,1744,1,
		0,0,0,1745,1746,1,0,0,0,1746,323,1,0,0,0,1747,1748,5,22,0,0,1748,1750,
		3,346,173,0,1749,1751,3,276,138,0,1750,1749,1,0,0,0,1750,1751,1,0,0,0,
		1751,1752,1,0,0,0,1752,1754,3,278,139,0,1753,1755,5,68,0,0,1754,1753,1,
		0,0,0,1754,1755,1,0,0,0,1755,325,1,0,0,0,1756,1757,5,45,0,0,1757,1758,
		3,244,122,0,1758,1760,3,346,173,0,1759,1761,3,272,136,0,1760,1759,1,0,
		0,0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,1764,5,63,0,0,1763,1765,3,
		250,125,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1766,1,0,0,0,1766,1768,
		5,64,0,0,1767,1769,3,208,104,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,
		1770,1,0,0,0,1770,1771,5,68,0,0,1771,327,1,0,0,0,1772,1773,3,238,119,0,
		1773,1774,5,68,0,0,1774,329,1,0,0,0,1775,1776,5,20,0,0,1776,1777,3,4,2,
		0,1777,1778,3,234,117,0,1778,1779,5,68,0,0,1779,331,1,0,0,0,1780,1781,
		5,78,0,0,1781,1782,3,346,173,0,1782,1783,5,63,0,0,1783,1784,5,64,0,0,1784,
		1785,3,264,132,0,1785,333,1,0,0,0,1786,1787,3,346,173,0,1787,1789,5,63,
		0,0,1788,1790,3,250,125,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,
		1,0,0,0,1791,1793,5,64,0,0,1792,1794,3,262,131,0,1793,1792,1,0,0,0,1793,
		1794,1,0,0,0,1794,1795,1,0,0,0,1795,1796,3,264,132,0,1796,335,1,0,0,0,
		1797,1799,3,338,169,0,1798,1800,3,200,100,0,1799,1798,1,0,0,0,1799,1800,
		1,0,0,0,1800,1801,1,0,0,0,1801,1803,5,63,0,0,1802,1804,3,250,125,0,1803,
		1802,1,0,0,0,1803,1804,1,0,0,0,1804,1805,1,0,0,0,1805,1807,5,64,0,0,1806,
		1808,3,208,104,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1814,1,0,0,0,
		1809,1815,3,248,124,0,1810,1811,3,298,149,0,1811,1812,3,74,37,0,1812,1813,
		5,68,0,0,1813,1815,1,0,0,0,1814,1809,1,0,0,0,1814,1810,1,0,0,0,1815,337,
		1,0,0,0,1816,1822,3,346,173,0,1817,1818,3,346,173,0,1818,1819,5,83,0,0,
		1819,1820,3,346,173,0,1820,1822,1,0,0,0,1821,1816,1,0,0,0,1821,1817,1,
		0,0,0,1822,1830,1,0,0,0,1823,1825,3,20,10,0,1824,1823,1,0,0,0,1824,1825,
		1,0,0,0,1825,1826,1,0,0,0,1826,1827,5,65,0,0,1827,1829,3,346,173,0,1828,
		1824,1,0,0,0,1829,1832,1,0,0,0,1830,1828,1,0,0,0,1830,1831,1,0,0,0,1831,
		339,1,0,0,0,1832,1830,1,0,0,0,1833,1834,3,4,2,0,1834,1837,3,346,173,0,
		1835,1836,5,79,0,0,1836,1838,3,26,13,0,1837,1835,1,0,0,0,1837,1838,1,0,
		0,0,1838,341,1,0,0,0,1839,1841,5,63,0,0,1840,1842,3,22,11,0,1841,1840,
		1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1844,5,64,0,0,1844,343,
		1,0,0,0,1845,1847,5,63,0,0,1846,1848,3,22,11,0,1847,1846,1,0,0,0,1847,
		1848,1,0,0,0,1848,1849,1,0,0,0,1849,1851,5,64,0,0,1850,1852,3,88,44,0,
		1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,345,1,0,0,0,1853,1854,7,11,0,
		0,1854,347,1,0,0,0,238,349,352,355,360,364,370,373,378,382,389,391,399,
		407,413,417,421,426,431,439,449,455,461,465,469,479,492,500,506,508,515,
		523,531,539,547,555,563,569,574,582,590,598,600,603,610,615,622,626,628,
		648,657,662,666,674,677,682,686,690,696,710,716,728,732,737,741,747,755,
		764,766,770,776,781,784,792,800,811,816,821,823,832,840,847,855,859,868,
		873,875,884,892,896,901,903,908,912,919,927,929,933,936,939,947,971,978,
		989,994,999,1007,1010,1017,1025,1038,1048,1070,1074,1078,1088,1093,1104,
		1107,1111,1123,1131,1135,1143,1148,1155,1161,1168,1176,1179,1186,1193,
		1197,1200,1206,1210,1216,1228,1235,1240,1243,1246,1253,1261,1278,1283,
		1287,1290,1293,1298,1304,1312,1318,1328,1336,1342,1352,1356,1358,1363,
		1365,1372,1381,1388,1391,1394,1398,1403,1415,1423,1430,1442,1448,1452,
		1456,1462,1468,1470,1477,1481,1484,1491,1502,1508,1514,1520,1526,1537,
		1541,1543,1553,1559,1572,1576,1578,1583,1588,1595,1601,1606,1612,1616,
		1622,1629,1639,1642,1645,1650,1674,1682,1688,1697,1706,1712,1719,1726,
		1728,1735,1738,1741,1745,1750,1754,1760,1764,1768,1789,1793,1799,1803,
		1807,1814,1821,1824,1830,1837,1841,1847,1851
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
